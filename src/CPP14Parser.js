// Generated from CPP14Parser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import CPP14ParserListener from './CPP14ParserListener.js';
import CPP14ParserVisitor from './CPP14ParserVisitor.js';

import CPP14ParserBase from './CPP14ParserBase.js';

const serializedATN = [4,1,145,1321,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,1,0,3,0,256,8,0,1,0,1,0,1,1,4,1,261,
8,1,11,1,12,1,262,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,272,8,1,1,2,1,2,3,2,276,
8,2,1,3,1,3,1,3,3,3,281,8,3,1,4,1,4,1,4,1,5,1,5,1,5,3,5,289,8,5,1,5,1,5,
1,5,1,5,1,5,5,5,296,8,5,10,5,12,5,299,9,5,1,6,1,6,3,6,303,8,6,1,6,1,6,1,
7,1,7,3,7,309,8,7,1,7,1,7,1,8,1,8,1,8,1,8,3,8,317,8,8,3,8,319,8,8,1,9,1,
9,1,10,1,10,1,10,5,10,326,8,10,10,10,12,10,329,9,10,1,10,3,10,332,8,10,1,
11,1,11,3,11,336,8,11,1,12,3,12,339,8,12,1,12,1,12,3,12,343,8,12,1,13,3,
13,346,8,13,1,13,1,13,1,13,1,14,1,14,3,14,353,8,14,1,14,1,14,3,14,357,8,
14,1,14,3,14,360,8,14,1,15,1,15,1,15,1,15,1,15,3,15,367,8,15,1,15,1,15,3,
15,371,8,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
3,15,385,8,15,1,15,1,15,3,15,389,8,15,1,15,1,15,1,15,1,15,3,15,395,8,15,
1,15,1,15,1,15,1,15,1,15,3,15,402,8,15,1,15,1,15,1,15,1,15,1,15,3,15,409,
8,15,1,15,1,15,5,15,413,8,15,10,15,12,15,416,9,15,1,16,1,16,1,17,1,17,1,
18,3,18,423,8,18,1,18,1,18,1,18,3,18,428,8,18,1,18,1,18,1,18,1,19,1,19,1,
19,1,19,1,19,3,19,438,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
1,19,3,19,450,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,459,8,19,1,20,
1,20,1,21,3,21,464,8,21,1,21,1,21,3,21,468,8,21,1,21,1,21,1,21,1,21,1,21,
3,21,475,8,21,1,21,3,21,478,8,21,1,22,1,22,1,22,1,22,1,23,1,23,3,23,486,
8,23,1,24,1,24,3,24,490,8,24,1,24,3,24,493,8,24,1,25,1,25,1,25,1,25,1,25,
1,25,1,25,1,25,1,25,1,25,5,25,505,8,25,10,25,12,25,508,9,25,1,26,1,26,3,
26,512,8,26,1,26,1,26,3,26,516,8,26,1,27,3,27,519,8,27,1,27,1,27,1,27,3,
27,524,8,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,534,8,28,1,29,1,
29,1,29,5,29,539,8,29,10,29,12,29,542,9,29,1,30,1,30,1,30,5,30,547,8,30,
10,30,12,30,550,9,30,1,31,1,31,1,31,5,31,555,8,31,10,31,12,31,558,9,31,1,
32,1,32,1,32,1,32,5,32,564,8,32,10,32,12,32,567,9,32,1,33,1,33,1,33,1,33,
3,33,573,8,33,1,34,1,34,1,34,5,34,578,8,34,10,34,12,34,581,9,34,1,35,1,35,
1,35,5,35,586,8,35,10,35,12,35,589,9,35,1,36,1,36,1,36,5,36,594,8,36,10,
36,12,36,597,9,36,1,37,1,37,1,37,5,37,602,8,37,10,37,12,37,605,9,37,1,38,
1,38,1,38,5,38,610,8,38,10,38,12,38,613,9,38,1,39,1,39,1,39,5,39,618,8,39,
10,39,12,39,621,9,39,1,40,1,40,1,40,5,40,626,8,40,10,40,12,40,629,9,40,1,
41,1,41,1,41,1,41,1,41,1,41,3,41,637,8,41,1,42,1,42,1,42,1,42,1,42,3,42,
644,8,42,1,43,1,43,1,44,1,44,1,44,5,44,651,8,44,10,44,12,44,654,9,44,1,45,
1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,665,8,46,3,46,667,8,46,1,47,
1,47,1,47,1,47,3,47,673,8,47,1,47,1,47,1,47,1,48,3,48,679,8,48,1,48,1,48,
1,49,1,49,3,49,685,8,49,1,49,1,49,1,50,4,50,690,8,50,11,50,12,50,691,1,51,
1,51,1,51,1,51,1,51,1,51,1,51,3,51,701,8,51,1,51,1,51,1,51,1,51,1,51,1,51,
3,51,709,8,51,1,52,1,52,1,52,1,52,1,52,1,52,3,52,717,8,52,3,52,719,8,52,
1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,
53,1,53,1,53,1,53,3,53,739,8,53,1,53,1,53,3,53,743,8,53,1,53,1,53,1,53,1,
53,3,53,749,8,53,1,53,1,53,1,53,3,53,754,8,53,1,54,1,54,3,54,758,8,54,1,
55,1,55,1,55,1,56,1,56,3,56,765,8,56,1,57,1,57,1,57,1,57,1,57,3,57,772,8,
57,1,57,1,57,3,57,776,8,57,1,57,1,57,1,58,1,58,1,59,4,59,783,8,59,11,59,
12,59,784,1,60,1,60,1,60,1,60,3,60,791,8,60,1,61,1,61,1,61,3,61,796,8,61,
1,62,3,62,799,8,62,1,62,3,62,802,8,62,1,62,1,62,3,62,806,8,62,1,62,1,62,
1,62,3,62,811,8,62,1,63,1,63,1,64,1,64,1,64,1,64,1,64,3,64,820,8,64,1,65,
4,65,823,8,65,11,65,12,65,824,1,66,1,66,1,67,1,67,1,68,1,68,3,68,833,8,68,
1,69,1,69,3,69,837,8,69,1,70,4,70,840,8,70,11,70,12,70,841,1,71,4,71,845,
8,71,11,71,12,71,846,1,72,1,72,1,73,1,73,1,74,3,74,854,8,74,1,74,1,74,1,
74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,
872,8,74,1,75,1,75,3,75,876,8,75,1,76,1,76,1,77,1,77,1,78,3,78,883,8,78,
1,78,1,78,1,78,3,78,888,8,78,1,78,1,78,3,78,892,8,78,1,78,1,78,1,79,1,79,
3,79,898,8,79,1,79,1,79,3,79,902,8,79,1,79,1,79,1,79,1,80,1,80,1,80,3,80,
910,8,80,1,80,1,80,1,80,1,81,1,81,1,81,5,81,918,8,81,10,81,12,81,921,9,81,
1,82,1,82,3,82,925,8,82,1,83,1,83,1,83,1,83,1,83,3,83,932,8,83,1,84,1,84,
3,84,936,8,84,5,84,938,8,84,10,84,12,84,941,9,84,1,84,1,84,1,85,1,85,1,85,
1,85,1,85,1,85,3,85,951,8,85,1,85,1,85,1,85,1,85,3,85,957,8,85,1,85,3,85,
960,8,85,5,85,962,8,85,10,85,12,85,965,9,85,1,86,1,86,3,86,969,8,86,1,86,
1,86,3,86,973,8,86,1,86,3,86,976,8,86,1,87,1,87,1,87,3,87,981,8,87,1,88,
1,88,3,88,985,8,88,1,88,1,88,3,88,989,8,88,3,88,991,8,88,1,89,4,89,994,8,
89,11,89,12,89,995,1,90,1,90,1,91,1,91,1,92,3,92,1003,8,92,1,92,1,92,1,93,
1,93,3,93,1009,8,93,1,94,1,94,3,94,1013,8,94,1,94,1,94,1,94,1,94,3,94,1019,
8,94,1,95,1,95,4,95,1023,8,95,11,95,12,95,1024,1,95,3,95,1028,8,95,3,95,
1030,8,95,1,96,1,96,1,96,1,96,3,96,1036,8,96,1,96,1,96,1,96,1,96,1,96,3,
96,1043,8,96,1,96,1,96,1,96,1,96,1,96,3,96,1050,8,96,1,96,1,96,3,96,1054,
8,96,5,96,1056,8,96,10,96,12,96,1059,9,96,1,97,5,97,1062,8,97,10,97,12,97,
1065,9,97,1,97,1,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1076,8,98,1,
98,3,98,1079,8,98,5,98,1081,8,98,10,98,12,98,1084,9,98,1,99,1,99,3,99,1088,
8,99,1,99,3,99,1091,8,99,1,100,1,100,1,100,5,100,1096,8,100,10,100,12,100,
1099,9,100,1,101,1,101,1,101,3,101,1104,8,101,3,101,1106,8,101,1,101,1,101,
3,101,1110,8,101,1,102,3,102,1113,8,102,1,102,1,102,1,102,1,103,3,103,1119,
8,103,1,103,1,103,1,103,1,103,3,103,1125,8,103,1,104,1,104,1,104,1,104,1,
104,3,104,1132,8,104,1,105,1,105,1,105,3,105,1137,8,105,1,106,1,106,3,106,
1141,8,106,1,107,1,107,3,107,1145,8,107,1,107,1,107,1,107,3,107,1150,8,107,
5,107,1152,8,107,10,107,12,107,1155,9,107,1,108,1,108,1,108,3,108,1160,8,
108,3,108,1162,8,108,1,108,1,108,1,109,1,109,1,110,1,110,1,110,3,110,1171,
8,110,1,110,1,110,1,111,1,111,1,111,3,111,1178,8,111,3,111,1180,8,111,1,
112,3,112,1183,8,112,1,112,1,112,1,113,1,113,1,114,1,114,1,115,1,115,1,115,
1,115,4,115,1195,8,115,11,115,12,115,1196,1,116,3,116,1200,8,116,1,116,3,
116,1203,8,116,1,116,1,116,1,116,1,116,3,116,1209,8,116,1,117,1,117,1,117,
5,117,1214,8,117,10,117,12,117,1217,9,117,1,118,1,118,1,118,1,118,3,118,
1223,8,118,1,118,1,118,3,118,1227,8,118,1,118,1,118,3,118,1231,8,118,1,119,
1,119,1,119,1,120,1,120,1,121,1,121,1,121,1,122,1,122,3,122,1243,8,122,1,
122,1,122,1,122,3,122,1248,8,122,5,122,1250,8,122,10,122,12,122,1253,9,122,
1,123,1,123,1,123,3,123,1258,8,123,1,123,1,123,3,123,1262,8,123,1,124,1,
124,1,125,1,125,1,125,3,125,1269,8,125,1,125,1,125,1,125,3,125,1274,8,125,
1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,
1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,
1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,
1,125,1,125,1,125,1,125,1,125,3,125,1317,8,125,1,126,1,126,1,126,1,824,6,
10,30,50,170,192,196,127,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
232,234,236,238,240,242,244,246,248,250,252,0,20,2,0,97,97,101,101,4,0,24,
24,31,31,58,58,65,65,2,0,124,124,129,129,1,0,120,121,2,0,91,93,97,100,2,
0,123,123,130,130,1,0,93,95,1,0,91,92,2,0,102,103,116,117,1,0,114,115,2,
0,101,101,104,113,2,0,34,34,44,44,2,0,46,46,60,60,2,0,61,61,78,78,2,0,97,
97,118,118,2,0,22,22,82,82,1,0,27,28,2,0,21,21,66,66,1,0,54,56,1,0,1,7,1452,
0,255,1,0,0,0,2,271,1,0,0,0,4,275,1,0,0,0,6,280,1,0,0,0,8,282,1,0,0,0,10,
285,1,0,0,0,12,300,1,0,0,0,14,306,1,0,0,0,16,318,1,0,0,0,18,320,1,0,0,0,
20,322,1,0,0,0,22,335,1,0,0,0,24,342,1,0,0,0,26,345,1,0,0,0,28,350,1,0,0,
0,30,388,1,0,0,0,32,417,1,0,0,0,34,419,1,0,0,0,36,422,1,0,0,0,38,458,1,0,
0,0,40,460,1,0,0,0,42,463,1,0,0,0,44,479,1,0,0,0,46,483,1,0,0,0,48,492,1,
0,0,0,50,494,1,0,0,0,52,515,1,0,0,0,54,518,1,0,0,0,56,533,1,0,0,0,58,535,
1,0,0,0,60,543,1,0,0,0,62,551,1,0,0,0,64,559,1,0,0,0,66,572,1,0,0,0,68,574,
1,0,0,0,70,582,1,0,0,0,72,590,1,0,0,0,74,598,1,0,0,0,76,606,1,0,0,0,78,614,
1,0,0,0,80,622,1,0,0,0,82,630,1,0,0,0,84,643,1,0,0,0,86,645,1,0,0,0,88,647,
1,0,0,0,90,655,1,0,0,0,92,666,1,0,0,0,94,672,1,0,0,0,96,678,1,0,0,0,98,682,
1,0,0,0,100,689,1,0,0,0,102,708,1,0,0,0,104,718,1,0,0,0,106,753,1,0,0,0,
108,757,1,0,0,0,110,759,1,0,0,0,112,764,1,0,0,0,114,775,1,0,0,0,116,779,
1,0,0,0,118,782,1,0,0,0,120,790,1,0,0,0,122,795,1,0,0,0,124,810,1,0,0,0,
126,812,1,0,0,0,128,819,1,0,0,0,130,822,1,0,0,0,132,826,1,0,0,0,134,828,
1,0,0,0,136,832,1,0,0,0,138,836,1,0,0,0,140,839,1,0,0,0,142,844,1,0,0,0,
144,848,1,0,0,0,146,850,1,0,0,0,148,871,1,0,0,0,150,875,1,0,0,0,152,877,
1,0,0,0,154,879,1,0,0,0,156,882,1,0,0,0,158,895,1,0,0,0,160,906,1,0,0,0,
162,914,1,0,0,0,164,922,1,0,0,0,166,931,1,0,0,0,168,939,1,0,0,0,170,950,
1,0,0,0,172,966,1,0,0,0,174,977,1,0,0,0,176,990,1,0,0,0,178,993,1,0,0,0,
180,997,1,0,0,0,182,999,1,0,0,0,184,1002,1,0,0,0,186,1006,1,0,0,0,188,1018,
1,0,0,0,190,1029,1,0,0,0,192,1042,1,0,0,0,194,1063,1,0,0,0,196,1068,1,0,
0,0,198,1085,1,0,0,0,200,1092,1,0,0,0,202,1100,1,0,0,0,204,1112,1,0,0,0,
206,1124,1,0,0,0,208,1131,1,0,0,0,210,1136,1,0,0,0,212,1140,1,0,0,0,214,
1142,1,0,0,0,216,1156,1,0,0,0,218,1165,1,0,0,0,220,1167,1,0,0,0,222,1174,
1,0,0,0,224,1182,1,0,0,0,226,1186,1,0,0,0,228,1188,1,0,0,0,230,1194,1,0,
0,0,232,1208,1,0,0,0,234,1210,1,0,0,0,236,1230,1,0,0,0,238,1232,1,0,0,0,
240,1235,1,0,0,0,242,1237,1,0,0,0,244,1240,1,0,0,0,246,1254,1,0,0,0,248,
1263,1,0,0,0,250,1316,1,0,0,0,252,1318,1,0,0,0,254,256,3,118,59,0,255,254,
1,0,0,0,255,256,1,0,0,0,256,257,1,0,0,0,257,258,5,0,0,1,258,1,1,0,0,0,259,
261,3,252,126,0,260,259,1,0,0,0,261,262,1,0,0,0,262,260,1,0,0,0,262,263,
1,0,0,0,263,272,1,0,0,0,264,272,5,69,0,0,265,266,5,85,0,0,266,267,3,88,44,
0,267,268,5,86,0,0,268,272,1,0,0,0,269,272,3,4,2,0,270,272,3,12,6,0,271,
260,1,0,0,0,271,264,1,0,0,0,271,265,1,0,0,0,271,269,1,0,0,0,271,270,1,0,
0,0,272,3,1,0,0,0,273,276,3,6,3,0,274,276,3,8,4,0,275,273,1,0,0,0,275,274,
1,0,0,0,276,5,1,0,0,0,277,281,5,132,0,0,278,279,5,99,0,0,279,281,3,218,109,
0,280,277,1,0,0,0,280,278,1,0,0,0,281,7,1,0,0,0,282,283,3,10,5,0,283,284,
3,6,3,0,284,9,1,0,0,0,285,288,6,5,-1,0,286,289,3,150,75,0,287,289,3,152,
76,0,288,286,1,0,0,0,288,287,1,0,0,0,288,289,1,0,0,0,289,290,1,0,0,0,290,
291,5,127,0,0,291,297,1,0,0,0,292,293,10,1,0,0,293,294,5,132,0,0,294,296,
5,127,0,0,295,292,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,
0,298,11,1,0,0,0,299,297,1,0,0,0,300,302,3,14,7,0,301,303,3,28,14,0,302,
301,1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,305,3,98,49,0,305,13,1,0,
0,0,306,308,5,87,0,0,307,309,3,16,8,0,308,307,1,0,0,0,308,309,1,0,0,0,309,
310,1,0,0,0,310,311,5,88,0,0,311,15,1,0,0,0,312,319,3,20,10,0,313,316,3,
18,9,0,314,315,5,122,0,0,315,317,3,20,10,0,316,314,1,0,0,0,316,317,1,0,0,
0,317,319,1,0,0,0,318,312,1,0,0,0,318,313,1,0,0,0,319,17,1,0,0,0,320,321,
7,0,0,0,321,19,1,0,0,0,322,327,3,22,11,0,323,324,5,122,0,0,324,326,3,22,
11,0,325,323,1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,
331,1,0,0,0,329,327,1,0,0,0,330,332,5,131,0,0,331,330,1,0,0,0,331,332,1,
0,0,0,332,21,1,0,0,0,333,336,3,24,12,0,334,336,3,26,13,0,335,333,1,0,0,0,
335,334,1,0,0,0,336,23,1,0,0,0,337,339,5,97,0,0,338,337,1,0,0,0,338,339,
1,0,0,0,339,340,1,0,0,0,340,343,5,132,0,0,341,343,5,69,0,0,342,338,1,0,0,
0,342,341,1,0,0,0,343,25,1,0,0,0,344,346,5,97,0,0,345,344,1,0,0,0,345,346,
1,0,0,0,346,347,1,0,0,0,347,348,5,132,0,0,348,349,3,208,104,0,349,27,1,0,
0,0,350,352,5,85,0,0,351,353,3,198,99,0,352,351,1,0,0,0,352,353,1,0,0,0,
353,354,1,0,0,0,354,356,5,86,0,0,355,357,5,47,0,0,356,355,1,0,0,0,356,357,
1,0,0,0,357,359,1,0,0,0,358,360,3,174,87,0,359,358,1,0,0,0,359,360,1,0,0,
0,360,29,1,0,0,0,361,362,6,15,-1,0,362,389,3,2,1,0,363,370,3,148,74,0,364,
366,5,85,0,0,365,367,3,34,17,0,366,365,1,0,0,0,366,367,1,0,0,0,367,368,1,
0,0,0,368,371,5,86,0,0,369,371,3,216,108,0,370,364,1,0,0,0,370,369,1,0,0,
0,371,389,1,0,0,0,372,373,7,1,0,0,373,374,5,102,0,0,374,375,3,186,93,0,375,
376,5,103,0,0,376,377,5,85,0,0,377,378,3,88,44,0,378,379,5,86,0,0,379,389,
1,0,0,0,380,381,3,32,16,0,381,384,5,85,0,0,382,385,3,88,44,0,383,385,3,186,
93,0,384,382,1,0,0,0,384,383,1,0,0,0,385,386,1,0,0,0,386,387,5,86,0,0,387,
389,1,0,0,0,388,361,1,0,0,0,388,363,1,0,0,0,388,372,1,0,0,0,388,380,1,0,
0,0,389,414,1,0,0,0,390,391,10,7,0,0,391,394,5,87,0,0,392,395,3,88,44,0,
393,395,3,216,108,0,394,392,1,0,0,0,394,393,1,0,0,0,395,396,1,0,0,0,396,
397,5,88,0,0,397,413,1,0,0,0,398,399,10,6,0,0,399,401,5,85,0,0,400,402,3,
34,17,0,401,400,1,0,0,0,401,402,1,0,0,0,402,403,1,0,0,0,403,413,5,86,0,0,
404,405,10,4,0,0,405,408,7,2,0,0,406,409,3,4,2,0,407,409,3,36,18,0,408,406,
1,0,0,0,408,407,1,0,0,0,409,413,1,0,0,0,410,411,10,3,0,0,411,413,7,3,0,0,
412,390,1,0,0,0,412,398,1,0,0,0,412,404,1,0,0,0,412,410,1,0,0,0,413,416,
1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,31,1,0,0,0,416,414,1,0,0,0,417,
418,5,75,0,0,418,33,1,0,0,0,419,420,3,214,107,0,420,35,1,0,0,0,421,423,3,
10,5,0,422,421,1,0,0,0,422,423,1,0,0,0,423,427,1,0,0,0,424,425,3,150,75,
0,425,426,5,127,0,0,426,428,1,0,0,0,427,424,1,0,0,0,427,428,1,0,0,0,428,
429,1,0,0,0,429,430,5,99,0,0,430,431,3,150,75,0,431,37,1,0,0,0,432,459,3,
30,15,0,433,438,5,120,0,0,434,438,5,121,0,0,435,438,3,40,20,0,436,438,5,
62,0,0,437,433,1,0,0,0,437,434,1,0,0,0,437,435,1,0,0,0,437,436,1,0,0,0,438,
439,1,0,0,0,439,459,3,38,19,0,440,449,5,62,0,0,441,442,5,85,0,0,442,443,
3,186,93,0,443,444,5,86,0,0,444,450,1,0,0,0,445,446,5,131,0,0,446,447,5,
85,0,0,447,448,5,132,0,0,448,450,5,86,0,0,449,441,1,0,0,0,449,445,1,0,0,
0,450,459,1,0,0,0,451,452,5,11,0,0,452,453,5,85,0,0,453,454,3,186,93,0,454,
455,5,86,0,0,455,459,1,0,0,0,456,459,3,42,21,0,457,459,3,54,27,0,458,432,
1,0,0,0,458,437,1,0,0,0,458,440,1,0,0,0,458,451,1,0,0,0,458,456,1,0,0,0,
458,457,1,0,0,0,459,39,1,0,0,0,460,461,7,4,0,0,461,41,1,0,0,0,462,464,5,
127,0,0,463,462,1,0,0,0,463,464,1,0,0,0,464,465,1,0,0,0,465,467,5,49,0,0,
466,468,3,44,22,0,467,466,1,0,0,0,467,468,1,0,0,0,468,474,1,0,0,0,469,475,
3,46,23,0,470,471,5,85,0,0,471,472,3,186,93,0,472,473,5,86,0,0,473,475,1,
0,0,0,474,469,1,0,0,0,474,470,1,0,0,0,475,477,1,0,0,0,476,478,3,52,26,0,
477,476,1,0,0,0,477,478,1,0,0,0,478,43,1,0,0,0,479,480,5,85,0,0,480,481,
3,34,17,0,481,482,5,86,0,0,482,45,1,0,0,0,483,485,3,140,70,0,484,486,3,48,
24,0,485,484,1,0,0,0,485,486,1,0,0,0,486,47,1,0,0,0,487,489,3,176,88,0,488,
490,3,48,24,0,489,488,1,0,0,0,489,490,1,0,0,0,490,493,1,0,0,0,491,493,3,
50,25,0,492,487,1,0,0,0,492,491,1,0,0,0,493,49,1,0,0,0,494,495,6,25,-1,0,
495,496,5,87,0,0,496,497,3,88,44,0,497,498,5,88,0,0,498,506,1,0,0,0,499,
500,10,1,0,0,500,501,5,87,0,0,501,502,3,90,45,0,502,503,5,88,0,0,503,505,
1,0,0,0,504,499,1,0,0,0,505,508,1,0,0,0,506,504,1,0,0,0,506,507,1,0,0,0,
507,51,1,0,0,0,508,506,1,0,0,0,509,511,5,85,0,0,510,512,3,34,17,0,511,510,
1,0,0,0,511,512,1,0,0,0,512,513,1,0,0,0,513,516,5,86,0,0,514,516,3,216,108,
0,515,509,1,0,0,0,515,514,1,0,0,0,516,53,1,0,0,0,517,519,5,127,0,0,518,517,
1,0,0,0,518,519,1,0,0,0,519,520,1,0,0,0,520,523,5,28,0,0,521,522,5,87,0,
0,522,524,5,88,0,0,523,521,1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,525,526,
3,56,28,0,526,55,1,0,0,0,527,534,3,38,19,0,528,529,5,85,0,0,529,530,3,186,
93,0,530,531,5,86,0,0,531,532,3,56,28,0,532,534,1,0,0,0,533,527,1,0,0,0,
533,528,1,0,0,0,534,57,1,0,0,0,535,540,3,56,28,0,536,537,7,5,0,0,537,539,
3,56,28,0,538,536,1,0,0,0,539,542,1,0,0,0,540,538,1,0,0,0,540,541,1,0,0,
0,541,59,1,0,0,0,542,540,1,0,0,0,543,548,3,58,29,0,544,545,7,6,0,0,545,547,
3,58,29,0,546,544,1,0,0,0,547,550,1,0,0,0,548,546,1,0,0,0,548,549,1,0,0,
0,549,61,1,0,0,0,550,548,1,0,0,0,551,556,3,60,30,0,552,553,7,7,0,0,553,555,
3,60,30,0,554,552,1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,0,556,557,1,0,0,
0,557,63,1,0,0,0,558,556,1,0,0,0,559,565,3,62,31,0,560,561,3,66,33,0,561,
562,3,62,31,0,562,564,1,0,0,0,563,560,1,0,0,0,564,567,1,0,0,0,565,563,1,
0,0,0,565,566,1,0,0,0,566,65,1,0,0,0,567,565,1,0,0,0,568,569,5,103,0,0,569,
573,5,103,0,0,570,571,5,102,0,0,571,573,5,102,0,0,572,568,1,0,0,0,572,570,
1,0,0,0,573,67,1,0,0,0,574,579,3,64,32,0,575,576,7,8,0,0,576,578,3,64,32,
0,577,575,1,0,0,0,578,581,1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,69,
1,0,0,0,581,579,1,0,0,0,582,587,3,68,34,0,583,584,7,9,0,0,584,586,3,68,34,
0,585,583,1,0,0,0,586,589,1,0,0,0,587,585,1,0,0,0,587,588,1,0,0,0,588,71,
1,0,0,0,589,587,1,0,0,0,590,595,3,70,35,0,591,592,5,97,0,0,592,594,3,70,
35,0,593,591,1,0,0,0,594,597,1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,
73,1,0,0,0,597,595,1,0,0,0,598,603,3,72,36,0,599,600,5,96,0,0,600,602,3,
72,36,0,601,599,1,0,0,0,602,605,1,0,0,0,603,601,1,0,0,0,603,604,1,0,0,0,
604,75,1,0,0,0,605,603,1,0,0,0,606,611,3,74,37,0,607,608,5,98,0,0,608,610,
3,74,37,0,609,607,1,0,0,0,610,613,1,0,0,0,611,609,1,0,0,0,611,612,1,0,0,
0,612,77,1,0,0,0,613,611,1,0,0,0,614,619,3,76,38,0,615,616,5,118,0,0,616,
618,3,76,38,0,617,615,1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,0,619,620,1,
0,0,0,620,79,1,0,0,0,621,619,1,0,0,0,622,627,3,78,39,0,623,624,5,119,0,0,
624,626,3,78,39,0,625,623,1,0,0,0,626,629,1,0,0,0,627,625,1,0,0,0,627,628,
1,0,0,0,628,81,1,0,0,0,629,627,1,0,0,0,630,636,3,80,40,0,631,632,5,125,0,
0,632,633,3,88,44,0,633,634,5,126,0,0,634,635,3,84,42,0,635,637,1,0,0,0,
636,631,1,0,0,0,636,637,1,0,0,0,637,83,1,0,0,0,638,644,3,82,41,0,639,640,
3,80,40,0,640,641,3,86,43,0,641,642,3,212,106,0,642,644,1,0,0,0,643,638,
1,0,0,0,643,639,1,0,0,0,644,85,1,0,0,0,645,646,7,10,0,0,646,87,1,0,0,0,647,
652,3,84,42,0,648,649,5,122,0,0,649,651,3,84,42,0,650,648,1,0,0,0,651,654,
1,0,0,0,652,650,1,0,0,0,652,653,1,0,0,0,653,89,1,0,0,0,654,652,1,0,0,0,655,
656,3,82,41,0,656,91,1,0,0,0,657,667,3,94,47,0,658,667,3,116,58,0,659,665,
3,96,48,0,660,665,3,98,49,0,661,665,3,102,51,0,662,665,3,106,53,0,663,665,
3,114,57,0,664,659,1,0,0,0,664,660,1,0,0,0,664,661,1,0,0,0,664,662,1,0,0,
0,664,663,1,0,0,0,665,667,1,0,0,0,666,657,1,0,0,0,666,658,1,0,0,0,666,664,
1,0,0,0,667,93,1,0,0,0,668,673,5,132,0,0,669,670,5,16,0,0,670,673,3,90,45,
0,671,673,5,27,0,0,672,668,1,0,0,0,672,669,1,0,0,0,672,671,1,0,0,0,673,674,
1,0,0,0,674,675,5,126,0,0,675,676,3,92,46,0,676,95,1,0,0,0,677,679,3,88,
44,0,678,677,1,0,0,0,678,679,1,0,0,0,679,680,1,0,0,0,680,681,5,128,0,0,681,
97,1,0,0,0,682,684,5,89,0,0,683,685,3,100,50,0,684,683,1,0,0,0,684,685,1,
0,0,0,685,686,1,0,0,0,686,687,5,90,0,0,687,99,1,0,0,0,688,690,3,92,46,0,
689,688,1,0,0,0,690,691,1,0,0,0,691,689,1,0,0,0,691,692,1,0,0,0,692,101,
1,0,0,0,693,694,5,43,0,0,694,695,5,85,0,0,695,696,3,104,52,0,696,697,5,86,
0,0,697,700,3,92,46,0,698,699,5,32,0,0,699,701,3,92,46,0,700,698,1,0,0,0,
700,701,1,0,0,0,701,709,1,0,0,0,702,703,5,67,0,0,703,704,5,85,0,0,704,705,
3,104,52,0,705,706,5,86,0,0,706,707,3,92,46,0,707,709,1,0,0,0,708,693,1,
0,0,0,708,702,1,0,0,0,709,103,1,0,0,0,710,719,3,88,44,0,711,712,3,130,65,
0,712,716,3,166,83,0,713,714,5,101,0,0,714,717,3,212,106,0,715,717,3,216,
108,0,716,713,1,0,0,0,716,715,1,0,0,0,717,719,1,0,0,0,718,710,1,0,0,0,718,
711,1,0,0,0,719,105,1,0,0,0,720,721,5,84,0,0,721,722,5,85,0,0,722,723,3,
104,52,0,723,724,5,86,0,0,724,725,3,92,46,0,725,754,1,0,0,0,726,727,5,29,
0,0,727,728,3,92,46,0,728,729,5,84,0,0,729,730,5,85,0,0,730,731,3,88,44,
0,731,732,5,86,0,0,732,733,5,128,0,0,733,754,1,0,0,0,734,735,5,40,0,0,735,
748,5,85,0,0,736,738,3,108,54,0,737,739,3,104,52,0,738,737,1,0,0,0,738,739,
1,0,0,0,739,740,1,0,0,0,740,742,5,128,0,0,741,743,3,88,44,0,742,741,1,0,
0,0,742,743,1,0,0,0,743,749,1,0,0,0,744,745,3,110,55,0,745,746,5,126,0,0,
746,747,3,112,56,0,747,749,1,0,0,0,748,736,1,0,0,0,748,744,1,0,0,0,749,750,
1,0,0,0,750,751,5,86,0,0,751,752,3,92,46,0,752,754,1,0,0,0,753,720,1,0,0,
0,753,726,1,0,0,0,753,734,1,0,0,0,754,107,1,0,0,0,755,758,3,96,48,0,756,
758,3,124,62,0,757,755,1,0,0,0,757,756,1,0,0,0,758,109,1,0,0,0,759,760,3,
130,65,0,760,761,3,166,83,0,761,111,1,0,0,0,762,765,3,88,44,0,763,765,3,
216,108,0,764,762,1,0,0,0,764,763,1,0,0,0,765,113,1,0,0,0,766,776,5,15,0,
0,767,776,5,25,0,0,768,771,5,59,0,0,769,772,3,88,44,0,770,772,3,216,108,
0,771,769,1,0,0,0,771,770,1,0,0,0,771,772,1,0,0,0,772,776,1,0,0,0,773,774,
5,42,0,0,774,776,5,132,0,0,775,766,1,0,0,0,775,767,1,0,0,0,775,768,1,0,0,
0,775,773,1,0,0,0,776,777,1,0,0,0,777,778,5,128,0,0,778,115,1,0,0,0,779,
780,3,122,61,0,780,117,1,0,0,0,781,783,3,120,60,0,782,781,1,0,0,0,783,784,
1,0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,119,1,0,0,0,786,791,3,122,61,
0,787,791,3,204,102,0,788,791,3,156,78,0,789,791,3,126,63,0,790,786,1,0,
0,0,790,787,1,0,0,0,790,788,1,0,0,0,790,789,1,0,0,0,791,121,1,0,0,0,792,
796,3,124,62,0,793,796,3,158,79,0,794,796,3,160,80,0,795,792,1,0,0,0,795,
793,1,0,0,0,795,794,1,0,0,0,796,123,1,0,0,0,797,799,3,130,65,0,798,797,1,
0,0,0,798,799,1,0,0,0,799,801,1,0,0,0,800,802,3,162,81,0,801,800,1,0,0,0,
801,802,1,0,0,0,802,803,1,0,0,0,803,811,5,128,0,0,804,806,3,130,65,0,805,
804,1,0,0,0,805,806,1,0,0,0,806,807,1,0,0,0,807,808,3,162,81,0,808,809,5,
128,0,0,809,811,1,0,0,0,810,798,1,0,0,0,810,805,1,0,0,0,811,125,1,0,0,0,
812,813,5,128,0,0,813,127,1,0,0,0,814,820,5,41,0,0,815,820,3,136,68,0,816,
820,3,132,66,0,817,820,5,74,0,0,818,820,5,23,0,0,819,814,1,0,0,0,819,815,
1,0,0,0,819,816,1,0,0,0,819,817,1,0,0,0,819,818,1,0,0,0,820,129,1,0,0,0,
821,823,3,128,64,0,822,821,1,0,0,0,823,824,1,0,0,0,824,825,1,0,0,0,824,822,
1,0,0,0,825,131,1,0,0,0,826,827,7,11,0,0,827,133,1,0,0,0,828,829,5,132,0,
0,829,135,1,0,0,0,830,833,3,138,69,0,831,833,3,220,110,0,832,830,1,0,0,0,
832,831,1,0,0,0,833,137,1,0,0,0,834,837,3,148,74,0,835,837,3,180,90,0,836,
834,1,0,0,0,836,835,1,0,0,0,837,139,1,0,0,0,838,840,3,136,68,0,839,838,1,
0,0,0,840,841,1,0,0,0,841,839,1,0,0,0,841,842,1,0,0,0,842,141,1,0,0,0,843,
845,3,138,69,0,844,843,1,0,0,0,845,846,1,0,0,0,846,844,1,0,0,0,846,847,1,
0,0,0,847,143,1,0,0,0,848,849,7,12,0,0,849,145,1,0,0,0,850,851,7,13,0,0,
851,147,1,0,0,0,852,854,3,10,5,0,853,852,1,0,0,0,853,854,1,0,0,0,854,855,
1,0,0,0,855,872,3,150,75,0,856,872,5,18,0,0,857,872,5,19,0,0,858,872,5,20,
0,0,859,872,5,83,0,0,860,872,5,14,0,0,861,872,5,60,0,0,862,872,5,45,0,0,
863,872,5,46,0,0,864,872,5,39,0,0,865,872,5,61,0,0,866,872,5,78,0,0,867,
872,5,39,0,0,868,872,5,30,0,0,869,872,5,81,0,0,870,872,5,13,0,0,871,853,
1,0,0,0,871,856,1,0,0,0,871,857,1,0,0,0,871,858,1,0,0,0,871,859,1,0,0,0,
871,860,1,0,0,0,871,861,1,0,0,0,871,862,1,0,0,0,871,863,1,0,0,0,871,864,
1,0,0,0,871,865,1,0,0,0,871,866,1,0,0,0,871,867,1,0,0,0,871,868,1,0,0,0,
871,869,1,0,0,0,871,870,1,0,0,0,872,149,1,0,0,0,873,876,3,218,109,0,874,
876,3,134,67,0,875,873,1,0,0,0,875,874,1,0,0,0,876,151,1,0,0,0,877,878,3,
154,77,0,878,153,1,0,0,0,879,880,5,132,0,0,880,155,1,0,0,0,881,883,5,44,
0,0,882,881,1,0,0,0,882,883,1,0,0,0,883,884,1,0,0,0,884,887,5,48,0,0,885,
888,5,132,0,0,886,888,3,154,77,0,887,885,1,0,0,0,887,886,1,0,0,0,887,888,
1,0,0,0,888,889,1,0,0,0,889,891,5,89,0,0,890,892,3,118,59,0,891,890,1,0,
0,0,891,892,1,0,0,0,892,893,1,0,0,0,893,894,5,90,0,0,894,157,1,0,0,0,895,
901,5,79,0,0,896,898,5,76,0,0,897,896,1,0,0,0,897,898,1,0,0,0,898,899,1,
0,0,0,899,902,3,10,5,0,900,902,5,127,0,0,901,897,1,0,0,0,901,900,1,0,0,0,
902,903,1,0,0,0,903,904,3,6,3,0,904,905,5,128,0,0,905,159,1,0,0,0,906,907,
5,79,0,0,907,909,5,48,0,0,908,910,3,10,5,0,909,908,1,0,0,0,909,910,1,0,0,
0,910,911,1,0,0,0,911,912,3,152,76,0,912,913,5,128,0,0,913,161,1,0,0,0,914,
919,3,164,82,0,915,916,5,122,0,0,916,918,3,164,82,0,917,915,1,0,0,0,918,
921,1,0,0,0,919,917,1,0,0,0,919,920,1,0,0,0,920,163,1,0,0,0,921,919,1,0,
0,0,922,924,3,166,83,0,923,925,3,208,104,0,924,923,1,0,0,0,924,925,1,0,0,
0,925,165,1,0,0,0,926,932,3,168,84,0,927,928,3,170,85,0,928,929,3,172,86,
0,929,930,3,174,87,0,930,932,1,0,0,0,931,926,1,0,0,0,931,927,1,0,0,0,932,
167,1,0,0,0,933,935,3,176,88,0,934,936,5,22,0,0,935,934,1,0,0,0,935,936,
1,0,0,0,936,938,1,0,0,0,937,933,1,0,0,0,938,941,1,0,0,0,939,937,1,0,0,0,
939,940,1,0,0,0,940,942,1,0,0,0,941,939,1,0,0,0,942,943,3,170,85,0,943,169,
1,0,0,0,944,945,6,85,-1,0,945,951,3,184,92,0,946,947,5,85,0,0,947,948,3,
168,84,0,948,949,5,86,0,0,949,951,1,0,0,0,950,944,1,0,0,0,950,946,1,0,0,
0,951,963,1,0,0,0,952,959,10,2,0,0,953,960,3,172,86,0,954,956,5,87,0,0,955,
957,3,90,45,0,956,955,1,0,0,0,956,957,1,0,0,0,957,958,1,0,0,0,958,960,5,
88,0,0,959,953,1,0,0,0,959,954,1,0,0,0,960,962,1,0,0,0,961,952,1,0,0,0,962,
965,1,0,0,0,963,961,1,0,0,0,963,964,1,0,0,0,964,171,1,0,0,0,965,963,1,0,
0,0,966,968,5,85,0,0,967,969,3,198,99,0,968,967,1,0,0,0,968,969,1,0,0,0,
969,970,1,0,0,0,970,972,5,86,0,0,971,973,3,178,89,0,972,971,1,0,0,0,972,
973,1,0,0,0,973,975,1,0,0,0,974,976,3,182,91,0,975,974,1,0,0,0,975,976,1,
0,0,0,976,173,1,0,0,0,977,978,5,124,0,0,978,980,3,142,71,0,979,981,3,188,
94,0,980,979,1,0,0,0,980,981,1,0,0,0,981,175,1,0,0,0,982,991,7,14,0,0,983,
985,3,10,5,0,984,983,1,0,0,0,984,985,1,0,0,0,985,986,1,0,0,0,986,988,5,93,
0,0,987,989,3,178,89,0,988,987,1,0,0,0,988,989,1,0,0,0,989,991,1,0,0,0,990,
982,1,0,0,0,990,984,1,0,0,0,991,177,1,0,0,0,992,994,3,180,90,0,993,992,1,
0,0,0,994,995,1,0,0,0,995,993,1,0,0,0,995,996,1,0,0,0,996,179,1,0,0,0,997,
998,7,15,0,0,998,181,1,0,0,0,999,1000,7,14,0,0,1000,183,1,0,0,0,1001,1003,
5,131,0,0,1002,1001,1,0,0,0,1002,1003,1,0,0,0,1003,1004,1,0,0,0,1004,1005,
3,4,2,0,1005,185,1,0,0,0,1006,1008,3,140,70,0,1007,1009,3,188,94,0,1008,
1007,1,0,0,0,1008,1009,1,0,0,0,1009,187,1,0,0,0,1010,1019,3,190,95,0,1011,
1013,3,192,96,0,1012,1011,1,0,0,0,1012,1013,1,0,0,0,1013,1014,1,0,0,0,1014,
1015,3,172,86,0,1015,1016,3,174,87,0,1016,1019,1,0,0,0,1017,1019,3,194,97,
0,1018,1010,1,0,0,0,1018,1012,1,0,0,0,1018,1017,1,0,0,0,1019,189,1,0,0,0,
1020,1030,3,192,96,0,1021,1023,3,176,88,0,1022,1021,1,0,0,0,1023,1024,1,
0,0,0,1024,1022,1,0,0,0,1024,1025,1,0,0,0,1025,1027,1,0,0,0,1026,1028,3,
192,96,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1030,1,0,0,0,1029,1020,
1,0,0,0,1029,1022,1,0,0,0,1030,191,1,0,0,0,1031,1032,6,96,-1,0,1032,1043,
3,172,86,0,1033,1035,5,87,0,0,1034,1036,3,90,45,0,1035,1034,1,0,0,0,1035,
1036,1,0,0,0,1036,1037,1,0,0,0,1037,1043,5,88,0,0,1038,1039,5,85,0,0,1039,
1040,3,190,95,0,1040,1041,5,86,0,0,1041,1043,1,0,0,0,1042,1031,1,0,0,0,1042,
1033,1,0,0,0,1042,1038,1,0,0,0,1043,1057,1,0,0,0,1044,1053,10,4,0,0,1045,
1054,3,172,86,0,1046,1047,3,192,96,0,1047,1049,5,87,0,0,1048,1050,3,90,45,
0,1049,1048,1,0,0,0,1049,1050,1,0,0,0,1050,1051,1,0,0,0,1051,1052,5,88,0,
0,1052,1054,1,0,0,0,1053,1045,1,0,0,0,1053,1046,1,0,0,0,1054,1056,1,0,0,
0,1055,1044,1,0,0,0,1056,1059,1,0,0,0,1057,1055,1,0,0,0,1057,1058,1,0,0,
0,1058,193,1,0,0,0,1059,1057,1,0,0,0,1060,1062,3,176,88,0,1061,1060,1,0,
0,0,1062,1065,1,0,0,0,1063,1061,1,0,0,0,1063,1064,1,0,0,0,1064,1066,1,0,
0,0,1065,1063,1,0,0,0,1066,1067,3,196,98,0,1067,195,1,0,0,0,1068,1069,6,
98,-1,0,1069,1070,5,131,0,0,1070,1082,1,0,0,0,1071,1078,10,2,0,0,1072,1079,
3,172,86,0,1073,1075,5,87,0,0,1074,1076,3,90,45,0,1075,1074,1,0,0,0,1075,
1076,1,0,0,0,1076,1077,1,0,0,0,1077,1079,5,88,0,0,1078,1072,1,0,0,0,1078,
1073,1,0,0,0,1079,1081,1,0,0,0,1080,1071,1,0,0,0,1081,1084,1,0,0,0,1082,
1080,1,0,0,0,1082,1083,1,0,0,0,1083,197,1,0,0,0,1084,1082,1,0,0,0,1085,1090,
3,200,100,0,1086,1088,5,122,0,0,1087,1086,1,0,0,0,1087,1088,1,0,0,0,1088,
1089,1,0,0,0,1089,1091,5,131,0,0,1090,1087,1,0,0,0,1090,1091,1,0,0,0,1091,
199,1,0,0,0,1092,1097,3,202,101,0,1093,1094,5,122,0,0,1094,1096,3,202,101,
0,1095,1093,1,0,0,0,1096,1099,1,0,0,0,1097,1095,1,0,0,0,1097,1098,1,0,0,
0,1098,201,1,0,0,0,1099,1097,1,0,0,0,1100,1105,3,130,65,0,1101,1106,3,166,
83,0,1102,1104,3,188,94,0,1103,1102,1,0,0,0,1103,1104,1,0,0,0,1104,1106,
1,0,0,0,1105,1101,1,0,0,0,1105,1103,1,0,0,0,1106,1109,1,0,0,0,1107,1108,
5,101,0,0,1108,1110,3,212,106,0,1109,1107,1,0,0,0,1109,1110,1,0,0,0,1110,
203,1,0,0,0,1111,1113,3,130,65,0,1112,1111,1,0,0,0,1112,1113,1,0,0,0,1113,
1114,1,0,0,0,1114,1115,3,166,83,0,1115,1116,3,206,103,0,1116,205,1,0,0,0,
1117,1119,3,242,121,0,1118,1117,1,0,0,0,1118,1119,1,0,0,0,1119,1120,1,0,
0,0,1120,1125,3,98,49,0,1121,1122,5,101,0,0,1122,1123,7,16,0,0,1123,1125,
5,128,0,0,1124,1118,1,0,0,0,1124,1121,1,0,0,0,1125,207,1,0,0,0,1126,1132,
3,210,105,0,1127,1128,5,85,0,0,1128,1129,3,34,17,0,1129,1130,5,86,0,0,1130,
1132,1,0,0,0,1131,1126,1,0,0,0,1131,1127,1,0,0,0,1132,209,1,0,0,0,1133,1134,
5,101,0,0,1134,1137,3,212,106,0,1135,1137,3,216,108,0,1136,1133,1,0,0,0,
1136,1135,1,0,0,0,1137,211,1,0,0,0,1138,1141,3,84,42,0,1139,1141,3,216,108,
0,1140,1138,1,0,0,0,1140,1139,1,0,0,0,1141,213,1,0,0,0,1142,1144,3,212,106,
0,1143,1145,5,131,0,0,1144,1143,1,0,0,0,1144,1145,1,0,0,0,1145,1153,1,0,
0,0,1146,1147,5,122,0,0,1147,1149,3,212,106,0,1148,1150,5,131,0,0,1149,1148,
1,0,0,0,1149,1150,1,0,0,0,1150,1152,1,0,0,0,1151,1146,1,0,0,0,1152,1155,
1,0,0,0,1153,1151,1,0,0,0,1153,1154,1,0,0,0,1154,215,1,0,0,0,1155,1153,1,
0,0,0,1156,1161,5,89,0,0,1157,1159,3,214,107,0,1158,1160,5,122,0,0,1159,
1158,1,0,0,0,1159,1160,1,0,0,0,1160,1162,1,0,0,0,1161,1157,1,0,0,0,1161,
1162,1,0,0,0,1162,1163,1,0,0,0,1163,1164,5,90,0,0,1164,217,1,0,0,0,1165,
1166,5,132,0,0,1166,219,1,0,0,0,1167,1168,3,222,111,0,1168,1170,5,89,0,0,
1169,1171,3,230,115,0,1170,1169,1,0,0,0,1170,1171,1,0,0,0,1171,1172,1,0,
0,0,1172,1173,5,90,0,0,1173,221,1,0,0,0,1174,1179,3,228,114,0,1175,1177,
3,224,112,0,1176,1178,3,226,113,0,1177,1176,1,0,0,0,1177,1178,1,0,0,0,1178,
1180,1,0,0,0,1179,1175,1,0,0,0,1179,1180,1,0,0,0,1180,223,1,0,0,0,1181,1183,
3,10,5,0,1182,1181,1,0,0,0,1182,1183,1,0,0,0,1183,1184,1,0,0,0,1184,1185,
3,218,109,0,1185,225,1,0,0,0,1186,1187,5,38,0,0,1187,227,1,0,0,0,1188,1189,
7,17,0,0,1189,229,1,0,0,0,1190,1195,3,232,116,0,1191,1192,3,240,120,0,1192,
1193,5,126,0,0,1193,1195,1,0,0,0,1194,1190,1,0,0,0,1194,1191,1,0,0,0,1195,
1196,1,0,0,0,1196,1194,1,0,0,0,1196,1197,1,0,0,0,1197,231,1,0,0,0,1198,1200,
3,130,65,0,1199,1198,1,0,0,0,1199,1200,1,0,0,0,1200,1202,1,0,0,0,1201,1203,
3,234,117,0,1202,1201,1,0,0,0,1202,1203,1,0,0,0,1203,1204,1,0,0,0,1204,1209,
5,128,0,0,1205,1209,3,204,102,0,1206,1209,3,158,79,0,1207,1209,3,126,63,
0,1208,1199,1,0,0,0,1208,1205,1,0,0,0,1208,1206,1,0,0,0,1208,1207,1,0,0,
0,1209,233,1,0,0,0,1210,1215,3,236,118,0,1211,1212,5,122,0,0,1212,1214,3,
236,118,0,1213,1211,1,0,0,0,1214,1217,1,0,0,0,1215,1213,1,0,0,0,1215,1216,
1,0,0,0,1216,235,1,0,0,0,1217,1215,1,0,0,0,1218,1222,3,166,83,0,1219,1223,
3,210,105,0,1220,1221,4,118,9,0,1221,1223,3,238,119,0,1222,1219,1,0,0,0,
1222,1220,1,0,0,0,1223,1231,1,0,0,0,1224,1231,3,166,83,0,1225,1227,5,132,
0,0,1226,1225,1,0,0,0,1226,1227,1,0,0,0,1227,1228,1,0,0,0,1228,1229,5,126,
0,0,1229,1231,3,90,45,0,1230,1218,1,0,0,0,1230,1224,1,0,0,0,1230,1226,1,
0,0,0,1231,237,1,0,0,0,1232,1233,5,101,0,0,1233,1234,5,1,0,0,1234,239,1,
0,0,0,1235,1236,7,18,0,0,1236,241,1,0,0,0,1237,1238,5,126,0,0,1238,1239,
3,244,122,0,1239,243,1,0,0,0,1240,1242,3,246,123,0,1241,1243,5,131,0,0,1242,
1241,1,0,0,0,1242,1243,1,0,0,0,1243,1251,1,0,0,0,1244,1245,5,122,0,0,1245,
1247,3,246,123,0,1246,1248,5,131,0,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,
1248,1250,1,0,0,0,1249,1244,1,0,0,0,1250,1253,1,0,0,0,1251,1249,1,0,0,0,
1251,1252,1,0,0,0,1252,245,1,0,0,0,1253,1251,1,0,0,0,1254,1261,3,248,124,
0,1255,1257,5,85,0,0,1256,1258,3,34,17,0,1257,1256,1,0,0,0,1257,1258,1,0,
0,0,1258,1259,1,0,0,0,1259,1262,5,86,0,0,1260,1262,3,216,108,0,1261,1255,
1,0,0,0,1261,1260,1,0,0,0,1262,247,1,0,0,0,1263,1264,5,132,0,0,1264,249,
1,0,0,0,1265,1268,5,49,0,0,1266,1267,5,87,0,0,1267,1269,5,88,0,0,1268,1266,
1,0,0,0,1268,1269,1,0,0,0,1269,1317,1,0,0,0,1270,1273,5,28,0,0,1271,1272,
5,87,0,0,1272,1274,5,88,0,0,1273,1271,1,0,0,0,1273,1274,1,0,0,0,1274,1317,
1,0,0,0,1275,1317,5,91,0,0,1276,1317,5,92,0,0,1277,1317,5,93,0,0,1278,1317,
5,94,0,0,1279,1317,5,95,0,0,1280,1317,5,96,0,0,1281,1317,5,97,0,0,1282,1317,
5,98,0,0,1283,1317,5,99,0,0,1284,1317,5,100,0,0,1285,1317,5,101,0,0,1286,
1317,5,103,0,0,1287,1317,5,102,0,0,1288,1317,5,117,0,0,1289,1317,5,104,0,
0,1290,1317,5,105,0,0,1291,1317,5,106,0,0,1292,1317,5,108,0,0,1293,1317,
5,109,0,0,1294,1317,5,110,0,0,1295,1317,5,111,0,0,1296,1297,5,102,0,0,1297,
1317,5,102,0,0,1298,1299,5,103,0,0,1299,1317,5,103,0,0,1300,1317,5,113,0,
0,1301,1317,5,112,0,0,1302,1317,5,114,0,0,1303,1317,5,115,0,0,1304,1317,
5,116,0,0,1305,1317,5,118,0,0,1306,1317,5,119,0,0,1307,1317,5,120,0,0,1308,
1317,5,121,0,0,1309,1317,5,122,0,0,1310,1317,5,123,0,0,1311,1317,5,124,0,
0,1312,1313,5,85,0,0,1313,1317,5,86,0,0,1314,1315,5,87,0,0,1315,1317,5,88,
0,0,1316,1265,1,0,0,0,1316,1270,1,0,0,0,1316,1275,1,0,0,0,1316,1276,1,0,
0,0,1316,1277,1,0,0,0,1316,1278,1,0,0,0,1316,1279,1,0,0,0,1316,1280,1,0,
0,0,1316,1281,1,0,0,0,1316,1282,1,0,0,0,1316,1283,1,0,0,0,1316,1284,1,0,
0,0,1316,1285,1,0,0,0,1316,1286,1,0,0,0,1316,1287,1,0,0,0,1316,1288,1,0,
0,0,1316,1289,1,0,0,0,1316,1290,1,0,0,0,1316,1291,1,0,0,0,1316,1292,1,0,
0,0,1316,1293,1,0,0,0,1316,1294,1,0,0,0,1316,1295,1,0,0,0,1316,1296,1,0,
0,0,1316,1298,1,0,0,0,1316,1300,1,0,0,0,1316,1301,1,0,0,0,1316,1302,1,0,
0,0,1316,1303,1,0,0,0,1316,1304,1,0,0,0,1316,1305,1,0,0,0,1316,1306,1,0,
0,0,1316,1307,1,0,0,0,1316,1308,1,0,0,0,1316,1309,1,0,0,0,1316,1310,1,0,
0,0,1316,1311,1,0,0,0,1316,1312,1,0,0,0,1316,1314,1,0,0,0,1317,251,1,0,0,
0,1318,1319,7,19,0,0,1319,253,1,0,0,0,173,255,262,271,275,280,288,297,302,
308,316,318,327,331,335,338,342,345,352,356,359,366,370,384,388,394,401,
408,412,414,422,427,437,449,458,463,467,474,477,485,489,492,506,511,515,
518,523,533,540,548,556,565,572,579,587,595,603,611,619,627,636,643,652,
664,666,672,678,684,691,700,708,716,718,738,742,748,753,757,764,771,775,
784,790,795,798,801,805,810,819,824,832,836,841,846,853,871,875,882,887,
891,897,901,909,919,924,931,935,939,950,956,959,963,968,972,975,980,984,
988,990,995,1002,1008,1012,1018,1024,1027,1029,1035,1042,1049,1053,1057,
1063,1075,1078,1082,1087,1090,1097,1103,1105,1109,1112,1118,1124,1131,1136,
1140,1144,1149,1153,1159,1161,1170,1177,1179,1182,1194,1196,1199,1202,1208,
1215,1222,1226,1230,1242,1247,1251,1257,1261,1268,1273,1316];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class CPP14Parser extends CPP14ParserBase {

    static grammarFileName = "CPP14Parser.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, "'alignas'", "'alignof'", "'asm'", 
                            "'auto'", "'bool'", "'break'", "'case'", "'catch'", 
                            "'char'", "'char16_t'", "'char32_t'", "'class'", 
                            "'const'", "'constexpr'", "'const_cast'", "'continue'", 
                            "'decltype'", "'default'", "'delete'", "'do'", 
                            "'double'", "'dynamic_cast'", "'else'", "'enum'", 
                            "'explicit'", "'export'", "'extern'", "'false'", 
                            "'final'", "'float'", "'for'", "'friend'", "'goto'", 
                            "'if'", "'inline'", "'int'", "'long'", "'mutable'", 
                            "'namespace'", "'new'", "'noexcept'", "'nullptr'", 
                            "'operator'", "'override'", "'private'", "'protected'", 
                            "'public'", "'register'", "'reinterpret_cast'", 
                            "'return'", "'short'", "'signed'", "'sizeof'", 
                            "'static'", "'static_assert'", "'static_cast'", 
                            "'struct'", "'switch'", "'template'", "'this'", 
                            "'thread_local'", "'throw'", "'true'", "'try'", 
                            "'typedef'", "'typeid'", "'typename'", "'union'", 
                            "'unsigned'", "'using'", "'virtual'", "'void'", 
                            "'volatile'", "'wchar_t'", "'while'", "'('", 
                            "')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'", 
                            "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", "'~'", 
                            null, "'='", "'<'", "'>'", "'+='", "'-='", "'*='", 
                            "'/='", "'%='", "'^='", "'&='", "'|='", "'<<='", 
                            "'>>='", "'=='", "'!='", "'<='", "'>='", null, 
                            null, "'++'", "'--'", "','", "'->*'", "'->'", 
                            "'?'", "':'", "'::'", "';'", "'.'", "'.*'", 
                            "'...'" ];
    static symbolicNames = [ null, "IntLiteral", "CharLiteral", "FloatLiteral", 
                             "StringLiteral", "BooleanLiteral", "PointerLiteral", 
                             "UserDefinedLiteral", "MultiLineMacro", "Directive", 
                             "Alignas", "Alignof", "Asm", "Auto", "Bool", 
                             "Break", "Case", "Catch", "Char", "Char16", 
                             "Char32", "Class", "Const", "Constexpr", "Const_cast", 
                             "Continue", "Decltype", "Default", "Delete", 
                             "Do", "Double", "Dynamic_cast", "Else", "Enum", 
                             "Explicit", "Export", "Extern", "False_", "Final", 
                             "Float", "For", "Friend", "Goto", "If", "Inline", 
                             "Int", "Long", "Mutable", "Namespace", "New", 
                             "Noexcept", "Nullptr", "Operator", "Override", 
                             "Private", "Protected", "Public", "Register", 
                             "Reinterpret_cast", "Return", "Short", "Signed", 
                             "Sizeof", "Static", "Static_assert", "Static_cast", 
                             "Struct", "Switch", "Template", "This", "Thread_local", 
                             "Throw", "True_", "Try", "Typedef", "Typeid_", 
                             "Typename_", "Union", "Unsigned", "Using", 
                             "Virtual", "Void", "Volatile", "Wchar", "While", 
                             "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
                             "LeftBrace", "RightBrace", "Plus", "Minus", 
                             "Star", "Div", "Mod", "Caret", "And", "Or", 
                             "Tilde", "Not", "Assign", "Less", "Greater", 
                             "PlusAssign", "MinusAssign", "StarAssign", 
                             "DivAssign", "ModAssign", "XorAssign", "AndAssign", 
                             "OrAssign", "LeftShiftAssign", "RightShiftAssign", 
                             "Equal", "NotEqual", "LessEqual", "GreaterEqual", 
                             "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
                             "Comma", "ArrowStar", "Arrow", "Question", 
                             "Colon", "Doublecolon", "Semi", "Dot", "DotStar", 
                             "Ellipsis", "Identifier", "DecimalLiteral", 
                             "OctalLiteral", "HexadecimalLiteral", "BinaryLiteral", 
                             "Intsuffix", "UserDefinedIntLiteral", "UserDefinedFloatLiteral", 
                             "UserDefinedStringLiteral", "UserDefinedCharLiteral", 
                             "Whitespace", "Newline", "BlockComment", "LineComment" ];
    static ruleNames = [ "translationUnit", "primaryExpr", "idExpr", "unqualifiedId", 
                         "qualifiedId", "nestedNameSpecifier", "lambdaExpr", 
                         "lambdaIntroducer", "lambdaCapture", "captureDefault", 
                         "captureList", "capture", "simpleCapture", "initcapture", 
                         "lambdaDeclarator", "postfixExpr", "typeIdOfTheTypeId", 
                         "exprList", "pseudoDestructorName", "unaryExpr", 
                         "unaryOperator", "newExpr_", "newPlacement", "newTypeId", 
                         "newDeclarator_", "noPointerNewDeclarator", "newInitializer_", 
                         "deleteExpr", "castExpr", "pointerMemberExpr", 
                         "multiplicativeExpr", "additiveExpr", "shiftExpr", 
                         "shiftOperator", "relationalExpr", "equalityExpr", 
                         "andExpr", "exclusiveOrExpr", "inclusiveOrExpr", 
                         "logicalAndExpr", "logicalOrExpr", "conditionalExpr", 
                         "assignmentExpr", "assignmentOperator", "expr", 
                         "constantExpr", "statement", "labeledStatement", 
                         "exprStatement", "compoundStatement", "statementSeq", 
                         "selectionStatement", "condition", "iterationStatement", 
                         "forInitStatement", "forRangeDeclaration", "forRangeInitializer", 
                         "jumpStatement", "declarationStatement", "declarationseq", 
                         "declaration", "blockDeclaration", "simpleDeclaration", 
                         "emptyDeclaration_", "declSpecifier", "declSpecifierSeq", 
                         "functionSpecifier", "typedefName", "typeSpecifier", 
                         "trailingTypeSpecifier", "typeSpecifierSeq", "trailingTypeSpecifierSeq", 
                         "simpleTypeLengthModifier", "simpleTypeSignednessModifier", 
                         "simpleTypeSpecifier", "theTypeName", "namespaceName", 
                         "originalNamespaceName", "namespaceDefinition", 
                         "usingDeclaration", "usingDirective", "initDeclaratorList", 
                         "initDeclarator", "declarator", "pointerDeclarator", 
                         "noPointerDeclarator", "parametersAndQualifiers", 
                         "trailingReturnType", "pointerOperator", "cvqualifierseq", 
                         "cvQualifier", "refqualifier", "declaratorid", 
                         "theTypeId", "abstractDeclarator", "pointerAbstractDeclarator", 
                         "noPointerAbstractDeclarator", "abstractPackDeclarator", 
                         "noPointerAbstractPackDeclarator", "parameterDeclarationClause", 
                         "parameterDeclarationList", "parameterDeclaration", 
                         "functionDefinition", "functionBody", "initializer", 
                         "braceOrEqualInitializer", "initializerClause", 
                         "initializerList", "bracedInitList", "className", 
                         "classSpecifier", "classHead", "classHeadName", 
                         "classVirtSpecifier", "classKey", "memberSpecification", 
                         "memberdeclaration", "memberDeclaratorList", "memberDeclarator", 
                         "pureSpecifier", "accessSpecifier", "constructorInitializer", 
                         "memInitializerList", "memInitializer", "meminitializerid", 
                         "theOperator", "literal" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = CPP14Parser.ruleNames;
        this.literalNames = CPP14Parser.literalNames;
        this.symbolicNames = CPP14Parser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 5:
    	    		return this.nestedNameSpecifier_sempred(localctx, predIndex);
    	case 15:
    	    		return this.postfixExpr_sempred(localctx, predIndex);
    	case 25:
    	    		return this.noPointerNewDeclarator_sempred(localctx, predIndex);
    	case 85:
    	    		return this.noPointerDeclarator_sempred(localctx, predIndex);
    	case 96:
    	    		return this.noPointerAbstractDeclarator_sempred(localctx, predIndex);
    	case 98:
    	    		return this.noPointerAbstractPackDeclarator_sempred(localctx, predIndex);
    	case 118:
    	    		return this.memberDeclarator_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    nestedNameSpecifier_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    postfixExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 7);
    		case 2:
    			return this.precpred(this._ctx, 6);
    		case 3:
    			return this.precpred(this._ctx, 4);
    		case 4:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    noPointerNewDeclarator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    noPointerDeclarator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    noPointerAbstractDeclarator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 4);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    noPointerAbstractPackDeclarator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    memberDeclarator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 9:
    			return  this.IsPureSpecifierAllowed() ;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	translationUnit() {
	    let localctx = new TranslationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, CPP14Parser.RULE_translationUnit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 255;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 13)) & ~0x1f) === 0 && ((1 << (_la - 13)) & 2485258211) !== 0) || ((((_la - 45)) & ~0x1f) === 0 && ((1 << (_la - 45)) & 539066379) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 2654395) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 26113) !== 0)) {
	            this.state = 254;
	            this.declarationseq();
	        }

	        this.state = 257;
	        this.match(CPP14Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryExpr() {
	    let localctx = new PrimaryExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, CPP14Parser.RULE_primaryExpr);
	    try {
	        this.state = 271;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 260; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 259;
	            		this.literal();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 262; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,1, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 264;
	            this.match(CPP14Parser.This);
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 265;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 266;
	            this.expr();
	            this.state = 267;
	            this.match(CPP14Parser.RightParen);
	            break;
	        case 99:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 269;
	            this.idExpr();
	            break;
	        case 87:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 270;
	            this.lambdaExpr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	idExpr() {
	    let localctx = new IdExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, CPP14Parser.RULE_idExpr);
	    try {
	        this.state = 275;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 273;
	            this.unqualifiedId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 274;
	            this.qualifiedId();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unqualifiedId() {
	    let localctx = new UnqualifiedIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, CPP14Parser.RULE_unqualifiedId);
	    try {
	        this.state = 280;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 277;
	            this.match(CPP14Parser.Identifier);
	            break;
	        case 99:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 278;
	            this.match(CPP14Parser.Tilde);
	            this.state = 279;
	            this.className();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedId() {
	    let localctx = new QualifiedIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, CPP14Parser.RULE_qualifiedId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 282;
	        this.nestedNameSpecifier(0);
	        this.state = 283;
	        this.unqualifiedId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	nestedNameSpecifier(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new NestedNameSpecifierContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 10;
	    this.enterRecursionRule(localctx, 10, CPP14Parser.RULE_nestedNameSpecifier, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 288;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        if(la_===1) {
	            this.state = 286;
	            this.theTypeName();

	        } else if(la_===2) {
	            this.state = 287;
	            this.namespaceName();

	        }
	        this.state = 290;
	        this.match(CPP14Parser.Doublecolon);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 297;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new NestedNameSpecifierContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_nestedNameSpecifier);
	                this.state = 292;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 293;
	                this.match(CPP14Parser.Identifier);
	                this.state = 294;
	                this.match(CPP14Parser.Doublecolon); 
	            }
	            this.state = 299;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	lambdaExpr() {
	    let localctx = new LambdaExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, CPP14Parser.RULE_lambdaExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 300;
	        this.lambdaIntroducer();
	        this.state = 302;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===85) {
	            this.state = 301;
	            this.lambdaDeclarator();
	        }

	        this.state = 304;
	        this.compoundStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaIntroducer() {
	    let localctx = new LambdaIntroducerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, CPP14Parser.RULE_lambdaIntroducer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 306;
	        this.match(CPP14Parser.LeftBracket);
	        this.state = 308;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===69 || _la===97 || _la===101 || _la===132) {
	            this.state = 307;
	            this.lambdaCapture();
	        }

	        this.state = 310;
	        this.match(CPP14Parser.RightBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaCapture() {
	    let localctx = new LambdaCaptureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, CPP14Parser.RULE_lambdaCapture);
	    var _la = 0;
	    try {
	        this.state = 318;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 312;
	            this.captureList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 313;
	            this.captureDefault();
	            this.state = 316;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===122) {
	                this.state = 314;
	                this.match(CPP14Parser.Comma);
	                this.state = 315;
	                this.captureList();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	captureDefault() {
	    let localctx = new CaptureDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, CPP14Parser.RULE_captureDefault);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 320;
	        _la = this._input.LA(1);
	        if(!(_la===97 || _la===101)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	captureList() {
	    let localctx = new CaptureListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, CPP14Parser.RULE_captureList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 322;
	        this.capture();
	        this.state = 327;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 323;
	            this.match(CPP14Parser.Comma);
	            this.state = 324;
	            this.capture();
	            this.state = 329;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 331;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 330;
	            this.match(CPP14Parser.Ellipsis);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	capture() {
	    let localctx = new CaptureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, CPP14Parser.RULE_capture);
	    try {
	        this.state = 335;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 333;
	            this.simpleCapture();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 334;
	            this.initcapture();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleCapture() {
	    let localctx = new SimpleCaptureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, CPP14Parser.RULE_simpleCapture);
	    var _la = 0;
	    try {
	        this.state = 342;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 97:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 338;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===97) {
	                this.state = 337;
	                this.match(CPP14Parser.And);
	            }

	            this.state = 340;
	            this.match(CPP14Parser.Identifier);
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 341;
	            this.match(CPP14Parser.This);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initcapture() {
	    let localctx = new InitcaptureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, CPP14Parser.RULE_initcapture);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 345;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===97) {
	            this.state = 344;
	            this.match(CPP14Parser.And);
	        }

	        this.state = 347;
	        this.match(CPP14Parser.Identifier);
	        this.state = 348;
	        this.initializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaDeclarator() {
	    let localctx = new LambdaDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, CPP14Parser.RULE_lambdaDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 350;
	        this.match(CPP14Parser.LeftParen);
	        this.state = 352;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1090281472) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 201333921) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 233729) !== 0) || _la===127 || _la===132) {
	            this.state = 351;
	            this.parameterDeclarationClause();
	        }

	        this.state = 354;
	        this.match(CPP14Parser.RightParen);
	        this.state = 356;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===47) {
	            this.state = 355;
	            this.match(CPP14Parser.Mutable);
	        }

	        this.state = 359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===124) {
	            this.state = 358;
	            this.trailingReturnType();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	postfixExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PostfixExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 30;
	    this.enterRecursionRule(localctx, 30, CPP14Parser.RULE_postfixExpr, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 388;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 362;
	            this.primaryExpr();
	            break;

	        case 2:
	            this.state = 363;
	            this.simpleTypeSpecifier();
	            this.state = 370;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 85:
	                this.state = 364;
	                this.match(CPP14Parser.LeftParen);
	                this.state = 366;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3508300030) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156056257) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 63395145) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                    this.state = 365;
	                    this.exprList();
	                }

	                this.state = 368;
	                this.match(CPP14Parser.RightParen);
	                break;
	            case 89:
	                this.state = 369;
	                this.bracedInitList();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 3:
	            this.state = 372;
	            _la = this._input.LA(1);
	            if(!(_la===24 || _la===31 || _la===58 || _la===65)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 373;
	            this.match(CPP14Parser.Less);
	            this.state = 374;
	            this.theTypeId();
	            this.state = 375;
	            this.match(CPP14Parser.Greater);
	            this.state = 376;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 377;
	            this.expr();
	            this.state = 378;
	            this.match(CPP14Parser.RightParen);
	            break;

	        case 4:
	            this.state = 380;
	            this.typeIdOfTheTypeId();
	            this.state = 381;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 384;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 382;
	                this.expr();
	                break;

	            case 2:
	                this.state = 383;
	                this.theTypeId();
	                break;

	            }
	            this.state = 386;
	            this.match(CPP14Parser.RightParen);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 414;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 412;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new PostfixExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixExpr);
	                    this.state = 390;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 391;
	                    this.match(CPP14Parser.LeftBracket);
	                    this.state = 394;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 1:
	                    case 2:
	                    case 3:
	                    case 4:
	                    case 5:
	                    case 6:
	                    case 7:
	                    case 11:
	                    case 13:
	                    case 14:
	                    case 18:
	                    case 19:
	                    case 20:
	                    case 24:
	                    case 28:
	                    case 30:
	                    case 31:
	                    case 39:
	                    case 45:
	                    case 46:
	                    case 49:
	                    case 58:
	                    case 60:
	                    case 61:
	                    case 62:
	                    case 65:
	                    case 69:
	                    case 75:
	                    case 78:
	                    case 81:
	                    case 83:
	                    case 85:
	                    case 87:
	                    case 91:
	                    case 92:
	                    case 93:
	                    case 97:
	                    case 98:
	                    case 99:
	                    case 100:
	                    case 120:
	                    case 121:
	                    case 127:
	                    case 132:
	                        this.state = 392;
	                        this.expr();
	                        break;
	                    case 89:
	                        this.state = 393;
	                        this.bracedInitList();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    this.state = 396;
	                    this.match(CPP14Parser.RightBracket);
	                    break;

	                case 2:
	                    localctx = new PostfixExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixExpr);
	                    this.state = 398;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 399;
	                    this.match(CPP14Parser.LeftParen);
	                    this.state = 401;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3508300030) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156056257) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 63395145) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                        this.state = 400;
	                        this.exprList();
	                    }

	                    this.state = 403;
	                    this.match(CPP14Parser.RightParen);
	                    break;

	                case 3:
	                    localctx = new PostfixExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixExpr);
	                    this.state = 404;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 405;
	                    _la = this._input.LA(1);
	                    if(!(_la===124 || _la===129)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 408;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 406;
	                        this.idExpr();
	                        break;

	                    case 2:
	                        this.state = 407;
	                        this.pseudoDestructorName();
	                        break;

	                    }
	                    break;

	                case 4:
	                    localctx = new PostfixExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_postfixExpr);
	                    this.state = 410;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 411;
	                    _la = this._input.LA(1);
	                    if(!(_la===120 || _la===121)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;

	                } 
	            }
	            this.state = 416;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	typeIdOfTheTypeId() {
	    let localctx = new TypeIdOfTheTypeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, CPP14Parser.RULE_typeIdOfTheTypeId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 417;
	        this.match(CPP14Parser.Typeid_);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprList() {
	    let localctx = new ExprListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, CPP14Parser.RULE_exprList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 419;
	        this.initializerList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pseudoDestructorName() {
	    let localctx = new PseudoDestructorNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, CPP14Parser.RULE_pseudoDestructorName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 422;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        if(la_===1) {
	            this.state = 421;
	            this.nestedNameSpecifier(0);

	        }
	        this.state = 427;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===132) {
	            this.state = 424;
	            this.theTypeName();
	            this.state = 425;
	            this.match(CPP14Parser.Doublecolon);
	        }

	        this.state = 429;
	        this.match(CPP14Parser.Tilde);
	        this.state = 430;
	        this.theTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpr() {
	    let localctx = new UnaryExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, CPP14Parser.RULE_unaryExpr);
	    try {
	        this.state = 458;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 432;
	            this.postfixExpr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 437;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 120:
	                this.state = 433;
	                this.match(CPP14Parser.PlusPlus);
	                break;
	            case 121:
	                this.state = 434;
	                this.match(CPP14Parser.MinusMinus);
	                break;
	            case 91:
	            case 92:
	            case 93:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	                this.state = 435;
	                this.unaryOperator();
	                break;
	            case 62:
	                this.state = 436;
	                this.match(CPP14Parser.Sizeof);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 439;
	            this.unaryExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 440;
	            this.match(CPP14Parser.Sizeof);
	            this.state = 449;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 85:
	                this.state = 441;
	                this.match(CPP14Parser.LeftParen);
	                this.state = 442;
	                this.theTypeId();
	                this.state = 443;
	                this.match(CPP14Parser.RightParen);
	                break;
	            case 131:
	                this.state = 445;
	                this.match(CPP14Parser.Ellipsis);
	                this.state = 446;
	                this.match(CPP14Parser.LeftParen);
	                this.state = 447;
	                this.match(CPP14Parser.Identifier);
	                this.state = 448;
	                this.match(CPP14Parser.RightParen);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 451;
	            this.match(CPP14Parser.Alignof);
	            this.state = 452;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 453;
	            this.theTypeId();
	            this.state = 454;
	            this.match(CPP14Parser.RightParen);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 456;
	            this.newExpr_();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 457;
	            this.deleteExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryOperator() {
	    let localctx = new UnaryOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, CPP14Parser.RULE_unaryOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 460;
	        _la = this._input.LA(1);
	        if(!(((((_la - 91)) & ~0x1f) === 0 && ((1 << (_la - 91)) & 967) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newExpr_() {
	    let localctx = new NewExpr_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, CPP14Parser.RULE_newExpr_);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 463;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 462;
	            this.match(CPP14Parser.Doublecolon);
	        }

	        this.state = 465;
	        this.match(CPP14Parser.New);
	        this.state = 467;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        if(la_===1) {
	            this.state = 466;
	            this.newPlacement();

	        }
	        this.state = 474;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 13:
	        case 14:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 30:
	        case 39:
	        case 45:
	        case 46:
	        case 60:
	        case 61:
	        case 66:
	        case 78:
	        case 81:
	        case 82:
	        case 83:
	        case 127:
	        case 132:
	            this.state = 469;
	            this.newTypeId();
	            break;
	        case 85:
	            this.state = 470;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 471;
	            this.theTypeId();
	            this.state = 472;
	            this.match(CPP14Parser.RightParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 477;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===85 || _la===89) {
	            this.state = 476;
	            this.newInitializer_();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newPlacement() {
	    let localctx = new NewPlacementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, CPP14Parser.RULE_newPlacement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 479;
	        this.match(CPP14Parser.LeftParen);
	        this.state = 480;
	        this.exprList();
	        this.state = 481;
	        this.match(CPP14Parser.RightParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newTypeId() {
	    let localctx = new NewTypeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, CPP14Parser.RULE_newTypeId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 483;
	        this.typeSpecifierSeq();
	        this.state = 485;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        if(la_===1) {
	            this.state = 484;
	            this.newDeclarator_();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newDeclarator_() {
	    let localctx = new NewDeclarator_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, CPP14Parser.RULE_newDeclarator_);
	    try {
	        this.state = 492;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 93:
	        case 97:
	        case 118:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 487;
	            this.pointerOperator();
	            this.state = 489;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	            if(la_===1) {
	                this.state = 488;
	                this.newDeclarator_();

	            }
	            break;
	        case 87:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 491;
	            this.noPointerNewDeclarator(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	noPointerNewDeclarator(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new NoPointerNewDeclaratorContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 50;
	    this.enterRecursionRule(localctx, 50, CPP14Parser.RULE_noPointerNewDeclarator, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 495;
	        this.match(CPP14Parser.LeftBracket);
	        this.state = 496;
	        this.expr();
	        this.state = 497;
	        this.match(CPP14Parser.RightBracket);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 506;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new NoPointerNewDeclaratorContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noPointerNewDeclarator);
	                this.state = 499;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 500;
	                this.match(CPP14Parser.LeftBracket);
	                this.state = 501;
	                this.constantExpr();
	                this.state = 502;
	                this.match(CPP14Parser.RightBracket); 
	            }
	            this.state = 508;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	newInitializer_() {
	    let localctx = new NewInitializer_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, CPP14Parser.RULE_newInitializer_);
	    var _la = 0;
	    try {
	        this.state = 515;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 85:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 509;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 511;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3508300030) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156056257) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 63395145) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                this.state = 510;
	                this.exprList();
	            }

	            this.state = 513;
	            this.match(CPP14Parser.RightParen);
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 514;
	            this.bracedInitList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteExpr() {
	    let localctx = new DeleteExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, CPP14Parser.RULE_deleteExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 518;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127) {
	            this.state = 517;
	            this.match(CPP14Parser.Doublecolon);
	        }

	        this.state = 520;
	        this.match(CPP14Parser.Delete);
	        this.state = 523;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        if(la_===1) {
	            this.state = 521;
	            this.match(CPP14Parser.LeftBracket);
	            this.state = 522;
	            this.match(CPP14Parser.RightBracket);

	        }
	        this.state = 525;
	        this.castExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castExpr() {
	    let localctx = new CastExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, CPP14Parser.RULE_castExpr);
	    try {
	        this.state = 533;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 527;
	            this.unaryExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 528;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 529;
	            this.theTypeId();
	            this.state = 530;
	            this.match(CPP14Parser.RightParen);
	            this.state = 531;
	            this.castExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pointerMemberExpr() {
	    let localctx = new PointerMemberExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, CPP14Parser.RULE_pointerMemberExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 535;
	        this.castExpr();
	        this.state = 540;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===123 || _la===130) {
	            this.state = 536;
	            _la = this._input.LA(1);
	            if(!(_la===123 || _la===130)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 537;
	            this.castExpr();
	            this.state = 542;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpr() {
	    let localctx = new MultiplicativeExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, CPP14Parser.RULE_multiplicativeExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 543;
	        this.pointerMemberExpr();
	        this.state = 548;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 93)) & ~0x1f) === 0 && ((1 << (_la - 93)) & 7) !== 0)) {
	            this.state = 544;
	            _la = this._input.LA(1);
	            if(!(((((_la - 93)) & ~0x1f) === 0 && ((1 << (_la - 93)) & 7) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 545;
	            this.pointerMemberExpr();
	            this.state = 550;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpr() {
	    let localctx = new AdditiveExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, CPP14Parser.RULE_additiveExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 551;
	        this.multiplicativeExpr();
	        this.state = 556;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===91 || _la===92) {
	            this.state = 552;
	            _la = this._input.LA(1);
	            if(!(_la===91 || _la===92)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 553;
	            this.multiplicativeExpr();
	            this.state = 558;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shiftExpr() {
	    let localctx = new ShiftExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, CPP14Parser.RULE_shiftExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 559;
	        this.additiveExpr();
	        this.state = 565;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,50,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 560;
	                this.shiftOperator();
	                this.state = 561;
	                this.additiveExpr(); 
	            }
	            this.state = 567;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,50,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shiftOperator() {
	    let localctx = new ShiftOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, CPP14Parser.RULE_shiftOperator);
	    try {
	        this.state = 572;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 103:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 568;
	            this.match(CPP14Parser.Greater);
	            this.state = 569;
	            this.match(CPP14Parser.Greater);
	            break;
	        case 102:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 570;
	            this.match(CPP14Parser.Less);
	            this.state = 571;
	            this.match(CPP14Parser.Less);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpr() {
	    let localctx = new RelationalExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, CPP14Parser.RULE_relationalExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 574;
	        this.shiftExpr();
	        this.state = 579;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 49155) !== 0)) {
	            this.state = 575;
	            _la = this._input.LA(1);
	            if(!(((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 49155) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 576;
	            this.shiftExpr();
	            this.state = 581;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equalityExpr() {
	    let localctx = new EqualityExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, CPP14Parser.RULE_equalityExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 582;
	        this.relationalExpr();
	        this.state = 587;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===114 || _la===115) {
	            this.state = 583;
	            _la = this._input.LA(1);
	            if(!(_la===114 || _la===115)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 584;
	            this.relationalExpr();
	            this.state = 589;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	andExpr() {
	    let localctx = new AndExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, CPP14Parser.RULE_andExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 590;
	        this.equalityExpr();
	        this.state = 595;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===97) {
	            this.state = 591;
	            this.match(CPP14Parser.And);
	            this.state = 592;
	            this.equalityExpr();
	            this.state = 597;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exclusiveOrExpr() {
	    let localctx = new ExclusiveOrExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, CPP14Parser.RULE_exclusiveOrExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 598;
	        this.andExpr();
	        this.state = 603;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===96) {
	            this.state = 599;
	            this.match(CPP14Parser.Caret);
	            this.state = 600;
	            this.andExpr();
	            this.state = 605;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inclusiveOrExpr() {
	    let localctx = new InclusiveOrExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, CPP14Parser.RULE_inclusiveOrExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 606;
	        this.exclusiveOrExpr();
	        this.state = 611;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===98) {
	            this.state = 607;
	            this.match(CPP14Parser.Or);
	            this.state = 608;
	            this.exclusiveOrExpr();
	            this.state = 613;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalAndExpr() {
	    let localctx = new LogicalAndExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, CPP14Parser.RULE_logicalAndExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 614;
	        this.inclusiveOrExpr();
	        this.state = 619;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===118) {
	            this.state = 615;
	            this.match(CPP14Parser.AndAnd);
	            this.state = 616;
	            this.inclusiveOrExpr();
	            this.state = 621;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalOrExpr() {
	    let localctx = new LogicalOrExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, CPP14Parser.RULE_logicalOrExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 622;
	        this.logicalAndExpr();
	        this.state = 627;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===119) {
	            this.state = 623;
	            this.match(CPP14Parser.OrOr);
	            this.state = 624;
	            this.logicalAndExpr();
	            this.state = 629;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalExpr() {
	    let localctx = new ConditionalExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, CPP14Parser.RULE_conditionalExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 630;
	        this.logicalOrExpr();
	        this.state = 636;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===125) {
	            this.state = 631;
	            this.match(CPP14Parser.Question);
	            this.state = 632;
	            this.expr();
	            this.state = 633;
	            this.match(CPP14Parser.Colon);
	            this.state = 634;
	            this.assignmentExpr();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentExpr() {
	    let localctx = new AssignmentExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, CPP14Parser.RULE_assignmentExpr);
	    try {
	        this.state = 643;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 638;
	            this.conditionalExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 639;
	            this.logicalOrExpr();
	            this.state = 640;
	            this.assignmentOperator();
	            this.state = 641;
	            this.initializerClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, CPP14Parser.RULE_assignmentOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 645;
	        _la = this._input.LA(1);
	        if(!(((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 8185) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, CPP14Parser.RULE_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 647;
	        this.assignmentExpr();
	        this.state = 652;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 648;
	            this.match(CPP14Parser.Comma);
	            this.state = 649;
	            this.assignmentExpr();
	            this.state = 654;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantExpr() {
	    let localctx = new ConstantExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, CPP14Parser.RULE_constantExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 655;
	        this.conditionalExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, CPP14Parser.RULE_statement);
	    try {
	        this.state = 666;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 657;
	            this.labeledStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 658;
	            this.declarationStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 664;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1:
	            case 2:
	            case 3:
	            case 4:
	            case 5:
	            case 6:
	            case 7:
	            case 11:
	            case 13:
	            case 14:
	            case 18:
	            case 19:
	            case 20:
	            case 24:
	            case 28:
	            case 30:
	            case 31:
	            case 39:
	            case 45:
	            case 46:
	            case 49:
	            case 58:
	            case 60:
	            case 61:
	            case 62:
	            case 65:
	            case 69:
	            case 75:
	            case 78:
	            case 81:
	            case 83:
	            case 85:
	            case 87:
	            case 91:
	            case 92:
	            case 93:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 120:
	            case 121:
	            case 127:
	            case 128:
	            case 132:
	                this.state = 659;
	                this.exprStatement();
	                break;
	            case 89:
	                this.state = 660;
	                this.compoundStatement();
	                break;
	            case 43:
	            case 67:
	                this.state = 661;
	                this.selectionStatement();
	                break;
	            case 29:
	            case 40:
	            case 84:
	                this.state = 662;
	                this.iterationStatement();
	                break;
	            case 15:
	            case 25:
	            case 42:
	            case 59:
	                this.state = 663;
	                this.jumpStatement();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledStatement() {
	    let localctx = new LabeledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, CPP14Parser.RULE_labeledStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 672;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 132:
	            this.state = 668;
	            this.match(CPP14Parser.Identifier);
	            break;
	        case 16:
	            this.state = 669;
	            this.match(CPP14Parser.Case);
	            this.state = 670;
	            this.constantExpr();
	            break;
	        case 27:
	            this.state = 671;
	            this.match(CPP14Parser.Default);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 674;
	        this.match(CPP14Parser.Colon);
	        this.state = 675;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprStatement() {
	    let localctx = new ExprStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, CPP14Parser.RULE_exprStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 678;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3508300030) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156056257) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 63378761) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	            this.state = 677;
	            this.expr();
	        }

	        this.state = 680;
	        this.match(CPP14Parser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundStatement() {
	    let localctx = new CompoundStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, CPP14Parser.RULE_compoundStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 682;
	        this.match(CPP14Parser.LeftBrace);
	        this.state = 684;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 4227721470) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2667618273) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 2393879307) !== 0) || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 1624244231) !== 0) || _la===131 || _la===132) {
	            this.state = 683;
	            this.statementSeq();
	        }

	        this.state = 686;
	        this.match(CPP14Parser.RightBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementSeq() {
	    let localctx = new StatementSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, CPP14Parser.RULE_statementSeq);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 689; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 688;
	            this.statement();
	            this.state = 691; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4227721470) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2667618273) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 2393879307) !== 0) || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 1624244231) !== 0) || _la===131 || _la===132);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectionStatement() {
	    let localctx = new SelectionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, CPP14Parser.RULE_selectionStatement);
	    try {
	        this.state = 708;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 43:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 693;
	            this.match(CPP14Parser.If);
	            this.state = 694;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 695;
	            this.condition();
	            this.state = 696;
	            this.match(CPP14Parser.RightParen);
	            this.state = 697;
	            this.statement();
	            this.state = 700;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	            if(la_===1) {
	                this.state = 698;
	                this.match(CPP14Parser.Else);
	                this.state = 699;
	                this.statement();

	            }
	            break;
	        case 67:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 702;
	            this.match(CPP14Parser.Switch);
	            this.state = 703;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 704;
	            this.condition();
	            this.state = 705;
	            this.match(CPP14Parser.RightParen);
	            this.state = 706;
	            this.statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition() {
	    let localctx = new ConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, CPP14Parser.RULE_condition);
	    try {
	        this.state = 718;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 710;
	            this.expr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 711;
	            this.declSpecifierSeq();
	            this.state = 712;
	            this.declarator();
	            this.state = 716;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 101:
	                this.state = 713;
	                this.match(CPP14Parser.Assign);
	                this.state = 714;
	                this.initializerClause();
	                break;
	            case 89:
	                this.state = 715;
	                this.bracedInitList();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterationStatement() {
	    let localctx = new IterationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, CPP14Parser.RULE_iterationStatement);
	    var _la = 0;
	    try {
	        this.state = 753;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 84:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 720;
	            this.match(CPP14Parser.While);
	            this.state = 721;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 722;
	            this.condition();
	            this.state = 723;
	            this.match(CPP14Parser.RightParen);
	            this.state = 724;
	            this.statement();
	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 726;
	            this.match(CPP14Parser.Do);
	            this.state = 727;
	            this.statement();
	            this.state = 728;
	            this.match(CPP14Parser.While);
	            this.state = 729;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 730;
	            this.expr();
	            this.state = 731;
	            this.match(CPP14Parser.RightParen);
	            this.state = 732;
	            this.match(CPP14Parser.Semi);
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 734;
	            this.match(CPP14Parser.For);
	            this.state = 735;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 748;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 736;
	                this.forInitStatement();
	                this.state = 738;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3522980094) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2634063009) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 2385220361) !== 0) || ((((_la - 98)) & ~0x1f) === 0 && ((1 << (_la - 98)) & 549453831) !== 0) || _la===132) {
	                    this.state = 737;
	                    this.condition();
	                }

	                this.state = 740;
	                this.match(CPP14Parser.Semi);
	                this.state = 742;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3508300030) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156056257) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 63378761) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                    this.state = 741;
	                    this.expr();
	                }

	                break;

	            case 2:
	                this.state = 744;
	                this.forRangeDeclaration();
	                this.state = 745;
	                this.match(CPP14Parser.Colon);
	                this.state = 746;
	                this.forRangeInitializer();
	                break;

	            }
	            this.state = 750;
	            this.match(CPP14Parser.RightParen);
	            this.state = 751;
	            this.statement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forInitStatement() {
	    let localctx = new ForInitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, CPP14Parser.RULE_forInitStatement);
	    try {
	        this.state = 757;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 755;
	            this.exprStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 756;
	            this.simpleDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forRangeDeclaration() {
	    let localctx = new ForRangeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, CPP14Parser.RULE_forRangeDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 759;
	        this.declSpecifierSeq();
	        this.state = 760;
	        this.declarator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forRangeInitializer() {
	    let localctx = new ForRangeInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, CPP14Parser.RULE_forRangeInitializer);
	    try {
	        this.state = 764;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 11:
	        case 13:
	        case 14:
	        case 18:
	        case 19:
	        case 20:
	        case 24:
	        case 28:
	        case 30:
	        case 31:
	        case 39:
	        case 45:
	        case 46:
	        case 49:
	        case 58:
	        case 60:
	        case 61:
	        case 62:
	        case 65:
	        case 69:
	        case 75:
	        case 78:
	        case 81:
	        case 83:
	        case 85:
	        case 87:
	        case 91:
	        case 92:
	        case 93:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 120:
	        case 121:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 762;
	            this.expr();
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 763;
	            this.bracedInitList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jumpStatement() {
	    let localctx = new JumpStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, CPP14Parser.RULE_jumpStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 775;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	            this.state = 766;
	            this.match(CPP14Parser.Break);
	            break;
	        case 25:
	            this.state = 767;
	            this.match(CPP14Parser.Continue);
	            break;
	        case 59:
	            this.state = 768;
	            this.match(CPP14Parser.Return);
	            this.state = 771;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 1:
	            case 2:
	            case 3:
	            case 4:
	            case 5:
	            case 6:
	            case 7:
	            case 11:
	            case 13:
	            case 14:
	            case 18:
	            case 19:
	            case 20:
	            case 24:
	            case 28:
	            case 30:
	            case 31:
	            case 39:
	            case 45:
	            case 46:
	            case 49:
	            case 58:
	            case 60:
	            case 61:
	            case 62:
	            case 65:
	            case 69:
	            case 75:
	            case 78:
	            case 81:
	            case 83:
	            case 85:
	            case 87:
	            case 91:
	            case 92:
	            case 93:
	            case 97:
	            case 98:
	            case 99:
	            case 100:
	            case 120:
	            case 121:
	            case 127:
	            case 132:
	            	this.state = 769;
	            	this.expr();
	            	break;
	            case 89:
	            	this.state = 770;
	            	this.bracedInitList();
	            	break;
	            case 128:
	            	break;
	            default:
	            	break;
	            }
	            break;
	        case 42:
	            this.state = 773;
	            this.match(CPP14Parser.Goto);
	            this.state = 774;
	            this.match(CPP14Parser.Identifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 777;
	        this.match(CPP14Parser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationStatement() {
	    let localctx = new DeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, CPP14Parser.RULE_declarationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 779;
	        this.blockDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarationseq() {
	    let localctx = new DeclarationseqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, CPP14Parser.RULE_declarationseq);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 782; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 781;
	            this.declaration();
	            this.state = 784; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 13)) & ~0x1f) === 0 && ((1 << (_la - 13)) & 2485258211) !== 0) || ((((_la - 45)) & ~0x1f) === 0 && ((1 << (_la - 45)) & 539066379) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 2654395) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 26113) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, CPP14Parser.RULE_declaration);
	    try {
	        this.state = 790;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 786;
	            this.blockDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 787;
	            this.functionDefinition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 788;
	            this.namespaceDefinition();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 789;
	            this.emptyDeclaration_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockDeclaration() {
	    let localctx = new BlockDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, CPP14Parser.RULE_blockDeclaration);
	    try {
	        this.state = 795;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 792;
	            this.simpleDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 793;
	            this.usingDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 794;
	            this.usingDirective();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDeclaration() {
	    let localctx = new SimpleDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, CPP14Parser.RULE_simpleDeclaration);
	    var _la = 0;
	    try {
	        this.state = 810;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 798;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	            if(la_===1) {
	                this.state = 797;
	                this.declSpecifierSeq();

	            }
	            this.state = 801;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 20737) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 25089) !== 0)) {
	                this.state = 800;
	                this.initDeclaratorList();
	            }

	            this.state = 803;
	            this.match(CPP14Parser.Semi);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 805;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	            if(la_===1) {
	                this.state = 804;
	                this.declSpecifierSeq();

	            }
	            this.state = 807;
	            this.initDeclaratorList();
	            this.state = 808;
	            this.match(CPP14Parser.Semi);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyDeclaration_() {
	    let localctx = new EmptyDeclaration_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, CPP14Parser.RULE_emptyDeclaration_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 812;
	        this.match(CPP14Parser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declSpecifier() {
	    let localctx = new DeclSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, CPP14Parser.RULE_declSpecifier);
	    try {
	        this.state = 819;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 41:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 814;
	            this.match(CPP14Parser.Friend);
	            break;
	        case 13:
	        case 14:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 30:
	        case 39:
	        case 45:
	        case 46:
	        case 60:
	        case 61:
	        case 66:
	        case 78:
	        case 81:
	        case 82:
	        case 83:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 815;
	            this.typeSpecifier();
	            break;
	        case 34:
	        case 44:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 816;
	            this.functionSpecifier();
	            break;
	        case 74:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 817;
	            this.match(CPP14Parser.Typedef);
	            break;
	        case 23:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 818;
	            this.match(CPP14Parser.Constexpr);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declSpecifierSeq() {
	    let localctx = new DeclSpecifierSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, CPP14Parser.RULE_declSpecifierSeq);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 822; 
	        this._errHandler.sync(this);
	        var _alt = 1+1;
	        do {
	        	switch (_alt) {
	        	case 1+1:
	        		this.state = 821;
	        		this.declSpecifier();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 824; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,88, this._ctx);
	        } while ( _alt!=1 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionSpecifier() {
	    let localctx = new FunctionSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, CPP14Parser.RULE_functionSpecifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 826;
	        _la = this._input.LA(1);
	        if(!(_la===34 || _la===44)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedefName() {
	    let localctx = new TypedefNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, CPP14Parser.RULE_typedefName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 828;
	        this.match(CPP14Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSpecifier() {
	    let localctx = new TypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, CPP14Parser.RULE_typeSpecifier);
	    try {
	        this.state = 832;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 13:
	        case 14:
	        case 18:
	        case 19:
	        case 20:
	        case 22:
	        case 30:
	        case 39:
	        case 45:
	        case 46:
	        case 60:
	        case 61:
	        case 78:
	        case 81:
	        case 82:
	        case 83:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 830;
	            this.trailingTypeSpecifier();
	            break;
	        case 21:
	        case 66:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 831;
	            this.classSpecifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trailingTypeSpecifier() {
	    let localctx = new TrailingTypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, CPP14Parser.RULE_trailingTypeSpecifier);
	    try {
	        this.state = 836;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 13:
	        case 14:
	        case 18:
	        case 19:
	        case 20:
	        case 30:
	        case 39:
	        case 45:
	        case 46:
	        case 60:
	        case 61:
	        case 78:
	        case 81:
	        case 83:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 834;
	            this.simpleTypeSpecifier();
	            break;
	        case 22:
	        case 82:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 835;
	            this.cvQualifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeSpecifierSeq() {
	    let localctx = new TypeSpecifierSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, CPP14Parser.RULE_typeSpecifierSeq);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 839; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 838;
	        		this.typeSpecifier();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 841; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,91, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trailingTypeSpecifierSeq() {
	    let localctx = new TrailingTypeSpecifierSeqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, CPP14Parser.RULE_trailingTypeSpecifierSeq);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 844; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 843;
	        		this.trailingTypeSpecifier();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 846; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,92, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleTypeLengthModifier() {
	    let localctx = new SimpleTypeLengthModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, CPP14Parser.RULE_simpleTypeLengthModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 848;
	        _la = this._input.LA(1);
	        if(!(_la===46 || _la===60)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleTypeSignednessModifier() {
	    let localctx = new SimpleTypeSignednessModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, CPP14Parser.RULE_simpleTypeSignednessModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 850;
	        _la = this._input.LA(1);
	        if(!(_la===61 || _la===78)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleTypeSpecifier() {
	    let localctx = new SimpleTypeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, CPP14Parser.RULE_simpleTypeSpecifier);
	    try {
	        this.state = 871;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 853;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	            if(la_===1) {
	                this.state = 852;
	                this.nestedNameSpecifier(0);

	            }
	            this.state = 855;
	            this.theTypeName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 856;
	            this.match(CPP14Parser.Char);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 857;
	            this.match(CPP14Parser.Char16);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 858;
	            this.match(CPP14Parser.Char32);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 859;
	            this.match(CPP14Parser.Wchar);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 860;
	            this.match(CPP14Parser.Bool);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 861;
	            this.match(CPP14Parser.Short);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 862;
	            this.match(CPP14Parser.Int);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 863;
	            this.match(CPP14Parser.Long);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 864;
	            this.match(CPP14Parser.Float);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 865;
	            this.match(CPP14Parser.Signed);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 866;
	            this.match(CPP14Parser.Unsigned);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 867;
	            this.match(CPP14Parser.Float);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 868;
	            this.match(CPP14Parser.Double);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 869;
	            this.match(CPP14Parser.Void);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 870;
	            this.match(CPP14Parser.Auto);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	theTypeName() {
	    let localctx = new TheTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, CPP14Parser.RULE_theTypeName);
	    try {
	        this.state = 875;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 873;
	            this.className();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 874;
	            this.typedefName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceName() {
	    let localctx = new NamespaceNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, CPP14Parser.RULE_namespaceName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 877;
	        this.originalNamespaceName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	originalNamespaceName() {
	    let localctx = new OriginalNamespaceNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, CPP14Parser.RULE_originalNamespaceName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 879;
	        this.match(CPP14Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceDefinition() {
	    let localctx = new NamespaceDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, CPP14Parser.RULE_namespaceDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 882;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===44) {
	            this.state = 881;
	            this.match(CPP14Parser.Inline);
	        }

	        this.state = 884;
	        this.match(CPP14Parser.Namespace);
	        this.state = 887;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	        if(la_===1) {
	            this.state = 885;
	            this.match(CPP14Parser.Identifier);

	        } else if(la_===2) {
	            this.state = 886;
	            this.originalNamespaceName();

	        }
	        this.state = 889;
	        this.match(CPP14Parser.LeftBrace);
	        this.state = 891;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 13)) & ~0x1f) === 0 && ((1 << (_la - 13)) & 2485258211) !== 0) || ((((_la - 45)) & ~0x1f) === 0 && ((1 << (_la - 45)) & 539066379) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 2654395) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 26113) !== 0)) {
	            this.state = 890;
	            localctx.namespaceBody = this.declarationseq();
	        }

	        this.state = 893;
	        this.match(CPP14Parser.RightBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usingDeclaration() {
	    let localctx = new UsingDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, CPP14Parser.RULE_usingDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 895;
	        this.match(CPP14Parser.Using);
	        this.state = 901;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===76) {
	                this.state = 896;
	                this.match(CPP14Parser.Typename_);
	            }

	            this.state = 899;
	            this.nestedNameSpecifier(0);
	            break;

	        case 2:
	            this.state = 900;
	            this.match(CPP14Parser.Doublecolon);
	            break;

	        }
	        this.state = 903;
	        this.unqualifiedId();
	        this.state = 904;
	        this.match(CPP14Parser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usingDirective() {
	    let localctx = new UsingDirectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, CPP14Parser.RULE_usingDirective);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 906;
	        this.match(CPP14Parser.Using);
	        this.state = 907;
	        this.match(CPP14Parser.Namespace);
	        this.state = 909;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        if(la_===1) {
	            this.state = 908;
	            this.nestedNameSpecifier(0);

	        }
	        this.state = 911;
	        this.namespaceName();
	        this.state = 912;
	        this.match(CPP14Parser.Semi);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initDeclaratorList() {
	    let localctx = new InitDeclaratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, CPP14Parser.RULE_initDeclaratorList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 914;
	        this.initDeclarator();
	        this.state = 919;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 915;
	            this.match(CPP14Parser.Comma);
	            this.state = 916;
	            this.initDeclarator();
	            this.state = 921;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initDeclarator() {
	    let localctx = new InitDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, CPP14Parser.RULE_initDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 922;
	        this.declarator();
	        this.state = 924;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 65553) !== 0)) {
	            this.state = 923;
	            this.initializer();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declarator() {
	    let localctx = new DeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, CPP14Parser.RULE_declarator);
	    try {
	        this.state = 931;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 926;
	            this.pointerDeclarator();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 927;
	            this.noPointerDeclarator(0);
	            this.state = 928;
	            this.parametersAndQualifiers();
	            this.state = 929;
	            this.trailingReturnType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pointerDeclarator() {
	    let localctx = new PointerDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, CPP14Parser.RULE_pointerDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 939;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,106,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 933;
	                this.pointerOperator();
	                this.state = 935;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===22) {
	                    this.state = 934;
	                    this.match(CPP14Parser.Const);
	                }
	         
	            }
	            this.state = 941;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,106,this._ctx);
	        }

	        this.state = 942;
	        this.noPointerDeclarator(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	noPointerDeclarator(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new NoPointerDeclaratorContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 170;
	    this.enterRecursionRule(localctx, 170, CPP14Parser.RULE_noPointerDeclarator, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 950;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 99:
	        case 127:
	        case 131:
	        case 132:
	            this.state = 945;
	            this.declaratorid();
	            break;
	        case 85:
	            this.state = 946;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 947;
	            this.pointerDeclarator();
	            this.state = 948;
	            this.match(CPP14Parser.RightParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 963;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,110,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new NoPointerDeclaratorContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noPointerDeclarator);
	                this.state = 952;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 959;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 85:
	                    this.state = 953;
	                    this.parametersAndQualifiers();
	                    break;
	                case 87:
	                    this.state = 954;
	                    this.match(CPP14Parser.LeftBracket);
	                    this.state = 956;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3508300030) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156056257) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 63378761) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                        this.state = 955;
	                        this.constantExpr();
	                    }

	                    this.state = 958;
	                    this.match(CPP14Parser.RightBracket);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 965;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,110,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	parametersAndQualifiers() {
	    let localctx = new ParametersAndQualifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, CPP14Parser.RULE_parametersAndQualifiers);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 966;
	        this.match(CPP14Parser.LeftParen);
	        this.state = 968;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 1090281472) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 201333921) !== 0) || ((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 233729) !== 0) || _la===127 || _la===132) {
	            this.state = 967;
	            this.parameterDeclarationClause();
	        }

	        this.state = 970;
	        this.match(CPP14Parser.RightParen);
	        this.state = 972;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        if(la_===1) {
	            this.state = 971;
	            this.cvqualifierseq();

	        }
	        this.state = 975;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        if(la_===1) {
	            this.state = 974;
	            this.refqualifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trailingReturnType() {
	    let localctx = new TrailingReturnTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, CPP14Parser.RULE_trailingReturnType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 977;
	        this.match(CPP14Parser.Arrow);
	        this.state = 978;
	        this.trailingTypeSpecifierSeq();
	        this.state = 980;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        if(la_===1) {
	            this.state = 979;
	            this.abstractDeclarator();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pointerOperator() {
	    let localctx = new PointerOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, CPP14Parser.RULE_pointerOperator);
	    var _la = 0;
	    try {
	        this.state = 990;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 97:
	        case 118:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 982;
	            _la = this._input.LA(1);
	            if(!(_la===97 || _la===118)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 93:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 984;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===127 || _la===132) {
	                this.state = 983;
	                this.nestedNameSpecifier(0);
	            }

	            this.state = 986;
	            this.match(CPP14Parser.Star);
	            this.state = 988;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	            if(la_===1) {
	                this.state = 987;
	                this.cvqualifierseq();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cvqualifierseq() {
	    let localctx = new CvqualifierseqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, CPP14Parser.RULE_cvqualifierseq);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 993; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 992;
	        		this.cvQualifier();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 995; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,118, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cvQualifier() {
	    let localctx = new CvQualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, CPP14Parser.RULE_cvQualifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 997;
	        _la = this._input.LA(1);
	        if(!(_la===22 || _la===82)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refqualifier() {
	    let localctx = new RefqualifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, CPP14Parser.RULE_refqualifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 999;
	        _la = this._input.LA(1);
	        if(!(_la===97 || _la===118)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaratorid() {
	    let localctx = new DeclaratoridContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, CPP14Parser.RULE_declaratorid);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1002;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 1001;
	            this.match(CPP14Parser.Ellipsis);
	        }

	        this.state = 1004;
	        this.idExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	theTypeId() {
	    let localctx = new TheTypeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, CPP14Parser.RULE_theTypeId);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1006;
	        this.typeSpecifierSeq();
	        this.state = 1008;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 4357) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 25089) !== 0)) {
	            this.state = 1007;
	            this.abstractDeclarator();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abstractDeclarator() {
	    let localctx = new AbstractDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, CPP14Parser.RULE_abstractDeclarator);
	    try {
	        this.state = 1018;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1010;
	            this.pointerAbstractDeclarator();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1012;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	            if(la_===1) {
	                this.state = 1011;
	                this.noPointerAbstractDeclarator(0);

	            }
	            this.state = 1014;
	            this.parametersAndQualifiers();
	            this.state = 1015;
	            this.trailingReturnType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1017;
	            this.abstractPackDeclarator();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pointerAbstractDeclarator() {
	    let localctx = new PointerAbstractDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, CPP14Parser.RULE_pointerAbstractDeclarator);
	    try {
	        this.state = 1029;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 85:
	        case 87:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1020;
	            this.noPointerAbstractDeclarator(0);
	            break;
	        case 93:
	        case 97:
	        case 118:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1022; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1021;
	            		this.pointerOperator();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1024; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,123, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 1027;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	            if(la_===1) {
	                this.state = 1026;
	                this.noPointerAbstractDeclarator(0);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	noPointerAbstractDeclarator(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new NoPointerAbstractDeclaratorContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 192;
	    this.enterRecursionRule(localctx, 192, CPP14Parser.RULE_noPointerAbstractDeclarator, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1042;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1032;
	            this.parametersAndQualifiers();
	            break;

	        case 2:
	            this.state = 1033;
	            this.match(CPP14Parser.LeftBracket);
	            this.state = 1035;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3508300030) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156056257) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 63378761) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                this.state = 1034;
	                this.constantExpr();
	            }

	            this.state = 1037;
	            this.match(CPP14Parser.RightBracket);
	            break;

	        case 3:
	            this.state = 1038;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 1039;
	            this.pointerAbstractDeclarator();
	            this.state = 1040;
	            this.match(CPP14Parser.RightParen);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1057;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,130,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new NoPointerAbstractDeclaratorContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noPointerAbstractDeclarator);
	                this.state = 1044;
	                if (!( this.precpred(this._ctx, 4))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                }
	                this.state = 1053;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1045;
	                    this.parametersAndQualifiers();
	                    break;

	                case 2:
	                    this.state = 1046;
	                    this.noPointerAbstractDeclarator(0);
	                    this.state = 1047;
	                    this.match(CPP14Parser.LeftBracket);
	                    this.state = 1049;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3508300030) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156056257) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 63378761) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                        this.state = 1048;
	                        this.constantExpr();
	                    }

	                    this.state = 1051;
	                    this.match(CPP14Parser.RightBracket);
	                    break;

	                } 
	            }
	            this.state = 1059;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,130,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	abstractPackDeclarator() {
	    let localctx = new AbstractPackDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, CPP14Parser.RULE_abstractPackDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1063;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 93)) & ~0x1f) === 0 && ((1 << (_la - 93)) & 33554449) !== 0) || _la===127 || _la===132) {
	            this.state = 1060;
	            this.pointerOperator();
	            this.state = 1065;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1066;
	        this.noPointerAbstractPackDeclarator(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	noPointerAbstractPackDeclarator(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new NoPointerAbstractPackDeclaratorContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 196;
	    this.enterRecursionRule(localctx, 196, CPP14Parser.RULE_noPointerAbstractPackDeclarator, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1069;
	        this.match(CPP14Parser.Ellipsis);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1082;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,134,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new NoPointerAbstractPackDeclaratorContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, CPP14Parser.RULE_noPointerAbstractPackDeclarator);
	                this.state = 1071;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1078;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 85:
	                    this.state = 1072;
	                    this.parametersAndQualifiers();
	                    break;
	                case 87:
	                    this.state = 1073;
	                    this.match(CPP14Parser.LeftBracket);
	                    this.state = 1075;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3508300030) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156056257) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 63378761) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                        this.state = 1074;
	                        this.constantExpr();
	                    }

	                    this.state = 1077;
	                    this.match(CPP14Parser.RightBracket);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1084;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,134,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	parameterDeclarationClause() {
	    let localctx = new ParameterDeclarationClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, CPP14Parser.RULE_parameterDeclarationClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1085;
	        this.parameterDeclarationList();
	        this.state = 1090;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===122 || _la===131) {
	            this.state = 1087;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===122) {
	                this.state = 1086;
	                this.match(CPP14Parser.Comma);
	            }

	            this.state = 1089;
	            this.match(CPP14Parser.Ellipsis);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterDeclarationList() {
	    let localctx = new ParameterDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, CPP14Parser.RULE_parameterDeclarationList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1092;
	        this.parameterDeclaration();
	        this.state = 1097;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,137,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1093;
	                this.match(CPP14Parser.Comma);
	                this.state = 1094;
	                this.parameterDeclaration(); 
	            }
	            this.state = 1099;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,137,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterDeclaration() {
	    let localctx = new ParameterDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, CPP14Parser.RULE_parameterDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1100;
	        this.declSpecifierSeq();
	        this.state = 1105;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1101;
	            this.declarator();
	            break;

	        case 2:
	            this.state = 1103;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	            if(la_===1) {
	                this.state = 1102;
	                this.abstractDeclarator();

	            }
	            break;

	        }
	        this.state = 1109;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===101) {
	            this.state = 1107;
	            this.match(CPP14Parser.Assign);
	            this.state = 1108;
	            this.initializerClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionDefinition() {
	    let localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, CPP14Parser.RULE_functionDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1112;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	        if(la_===1) {
	            this.state = 1111;
	            this.declSpecifierSeq();

	        }
	        this.state = 1114;
	        this.declarator();
	        this.state = 1115;
	        this.functionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBody() {
	    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, CPP14Parser.RULE_functionBody);
	    var _la = 0;
	    try {
	        this.state = 1124;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	        case 126:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1118;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===126) {
	                this.state = 1117;
	                this.constructorInitializer();
	            }

	            this.state = 1120;
	            this.compoundStatement();
	            break;
	        case 101:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1121;
	            this.match(CPP14Parser.Assign);
	            this.state = 1122;
	            _la = this._input.LA(1);
	            if(!(_la===27 || _la===28)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1123;
	            this.match(CPP14Parser.Semi);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializer() {
	    let localctx = new InitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, CPP14Parser.RULE_initializer);
	    try {
	        this.state = 1131;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	        case 101:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1126;
	            this.braceOrEqualInitializer();
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1127;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 1128;
	            this.exprList();
	            this.state = 1129;
	            this.match(CPP14Parser.RightParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	braceOrEqualInitializer() {
	    let localctx = new BraceOrEqualInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, CPP14Parser.RULE_braceOrEqualInitializer);
	    try {
	        this.state = 1136;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 101:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1133;
	            this.match(CPP14Parser.Assign);
	            this.state = 1134;
	            this.initializerClause();
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1135;
	            this.bracedInitList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializerClause() {
	    let localctx = new InitializerClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, CPP14Parser.RULE_initializerClause);
	    try {
	        this.state = 1140;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 11:
	        case 13:
	        case 14:
	        case 18:
	        case 19:
	        case 20:
	        case 24:
	        case 28:
	        case 30:
	        case 31:
	        case 39:
	        case 45:
	        case 46:
	        case 49:
	        case 58:
	        case 60:
	        case 61:
	        case 62:
	        case 65:
	        case 69:
	        case 75:
	        case 78:
	        case 81:
	        case 83:
	        case 85:
	        case 87:
	        case 91:
	        case 92:
	        case 93:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	        case 120:
	        case 121:
	        case 127:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1138;
	            this.assignmentExpr();
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1139;
	            this.bracedInitList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializerList() {
	    let localctx = new InitializerListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, CPP14Parser.RULE_initializerList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1142;
	        this.initializerClause();
	        this.state = 1144;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 1143;
	            this.match(CPP14Parser.Ellipsis);
	        }

	        this.state = 1153;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,149,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1146;
	                this.match(CPP14Parser.Comma);
	                this.state = 1147;
	                this.initializerClause();
	                this.state = 1149;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===131) {
	                    this.state = 1148;
	                    this.match(CPP14Parser.Ellipsis);
	                }
	         
	            }
	            this.state = 1155;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,149,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bracedInitList() {
	    let localctx = new BracedInitListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, CPP14Parser.RULE_bracedInitList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1156;
	        this.match(CPP14Parser.LeftBrace);
	        this.state = 1161;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3508300030) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156056257) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 63395145) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	            this.state = 1157;
	            this.initializerList();
	            this.state = 1159;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===122) {
	                this.state = 1158;
	                this.match(CPP14Parser.Comma);
	            }

	        }

	        this.state = 1163;
	        this.match(CPP14Parser.RightBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	className() {
	    let localctx = new ClassNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, CPP14Parser.RULE_className);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1165;
	        this.match(CPP14Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classSpecifier() {
	    let localctx = new ClassSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, CPP14Parser.RULE_classSpecifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1167;
	        this.classHead();
	        this.state = 1168;
	        this.match(CPP14Parser.LeftBrace);
	        this.state = 1170;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 13)) & ~0x1f) === 0 && ((1 << (_la - 13)) & 2485258211) !== 0) || ((((_la - 45)) & ~0x1f) === 0 && ((1 << (_la - 45)) & 539069955) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 2654395) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 26369) !== 0)) {
	            this.state = 1169;
	            this.memberSpecification();
	        }

	        this.state = 1172;
	        this.match(CPP14Parser.RightBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classHead() {
	    let localctx = new ClassHeadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, CPP14Parser.RULE_classHead);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1174;
	        this.classKey();
	        this.state = 1179;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===127 || _la===132) {
	            this.state = 1175;
	            this.classHeadName();
	            this.state = 1177;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===38) {
	                this.state = 1176;
	                this.classVirtSpecifier();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classHeadName() {
	    let localctx = new ClassHeadNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, CPP14Parser.RULE_classHeadName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1182;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	        if(la_===1) {
	            this.state = 1181;
	            this.nestedNameSpecifier(0);

	        }
	        this.state = 1184;
	        this.className();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classVirtSpecifier() {
	    let localctx = new ClassVirtSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, CPP14Parser.RULE_classVirtSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1186;
	        this.match(CPP14Parser.Final);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classKey() {
	    let localctx = new ClassKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, CPP14Parser.RULE_classKey);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1188;
	        _la = this._input.LA(1);
	        if(!(_la===21 || _la===66)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberSpecification() {
	    let localctx = new MemberSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, CPP14Parser.RULE_memberSpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1194; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1194;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 13:
	            case 14:
	            case 18:
	            case 19:
	            case 20:
	            case 21:
	            case 22:
	            case 23:
	            case 30:
	            case 34:
	            case 39:
	            case 41:
	            case 44:
	            case 45:
	            case 46:
	            case 60:
	            case 61:
	            case 66:
	            case 74:
	            case 78:
	            case 79:
	            case 81:
	            case 82:
	            case 83:
	            case 85:
	            case 93:
	            case 97:
	            case 99:
	            case 118:
	            case 126:
	            case 127:
	            case 128:
	            case 131:
	            case 132:
	                this.state = 1190;
	                this.memberdeclaration();
	                break;
	            case 54:
	            case 55:
	            case 56:
	                this.state = 1191;
	                this.accessSpecifier();
	                this.state = 1192;
	                this.match(CPP14Parser.Colon);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1196; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 13)) & ~0x1f) === 0 && ((1 << (_la - 13)) & 2485258211) !== 0) || ((((_la - 45)) & ~0x1f) === 0 && ((1 << (_la - 45)) & 539069955) !== 0) || ((((_la - 78)) & ~0x1f) === 0 && ((1 << (_la - 78)) & 2654395) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 26369) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberdeclaration() {
	    let localctx = new MemberdeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, CPP14Parser.RULE_memberdeclaration);
	    var _la = 0;
	    try {
	        this.state = 1208;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1199;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	            if(la_===1) {
	                this.state = 1198;
	                this.declSpecifierSeq();

	            }
	            this.state = 1202;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 85)) & ~0x1f) === 0 && ((1 << (_la - 85)) & 20737) !== 0) || ((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 25345) !== 0)) {
	                this.state = 1201;
	                this.memberDeclaratorList();
	            }

	            this.state = 1204;
	            this.match(CPP14Parser.Semi);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1205;
	            this.functionDefinition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1206;
	            this.usingDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1207;
	            this.emptyDeclaration_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberDeclaratorList() {
	    let localctx = new MemberDeclaratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, CPP14Parser.RULE_memberDeclaratorList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1210;
	        this.memberDeclarator();
	        this.state = 1215;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 1211;
	            this.match(CPP14Parser.Comma);
	            this.state = 1212;
	            this.memberDeclarator();
	            this.state = 1217;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memberDeclarator() {
	    let localctx = new MemberDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, CPP14Parser.RULE_memberDeclarator);
	    var _la = 0;
	    try {
	        this.state = 1230;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1218;
	            this.declarator();
	            this.state = 1222;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1219;
	                this.braceOrEqualInitializer();
	                break;

	            case 2:
	                this.state = 1220;
	                if (!(  this.IsPureSpecifierAllowed() )) {
	                    throw new antlr4.error.FailedPredicateException(this, " this.IsPureSpecifierAllowed() ");
	                }
	                this.state = 1221;
	                this.pureSpecifier();
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1224;
	            this.declarator();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1226;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===132) {
	                this.state = 1225;
	                this.match(CPP14Parser.Identifier);
	            }

	            this.state = 1228;
	            this.match(CPP14Parser.Colon);
	            this.state = 1229;
	            this.constantExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pureSpecifier() {
	    let localctx = new PureSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, CPP14Parser.RULE_pureSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1232;
	        this.match(CPP14Parser.Assign);
	        this.state = 1233;
	        this.match(CPP14Parser.IntLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accessSpecifier() {
	    let localctx = new AccessSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, CPP14Parser.RULE_accessSpecifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1235;
	        _la = this._input.LA(1);
	        if(!(((((_la - 54)) & ~0x1f) === 0 && ((1 << (_la - 54)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorInitializer() {
	    let localctx = new ConstructorInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, CPP14Parser.RULE_constructorInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1237;
	        this.match(CPP14Parser.Colon);
	        this.state = 1238;
	        this.memInitializerList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memInitializerList() {
	    let localctx = new MemInitializerListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, CPP14Parser.RULE_memInitializerList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1240;
	        this.memInitializer();
	        this.state = 1242;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 1241;
	            this.match(CPP14Parser.Ellipsis);
	        }

	        this.state = 1251;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===122) {
	            this.state = 1244;
	            this.match(CPP14Parser.Comma);
	            this.state = 1245;
	            this.memInitializer();
	            this.state = 1247;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===131) {
	                this.state = 1246;
	                this.match(CPP14Parser.Ellipsis);
	            }

	            this.state = 1253;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	memInitializer() {
	    let localctx = new MemInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, CPP14Parser.RULE_memInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1254;
	        this.meminitializerid();
	        this.state = 1261;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 85:
	            this.state = 1255;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 1257;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3508300030) !== 0) || ((((_la - 39)) & ~0x1f) === 0 && ((1 << (_la - 39)) & 1156056257) !== 0) || ((((_la - 75)) & ~0x1f) === 0 && ((1 << (_la - 75)) & 63395145) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 4227) !== 0)) {
	                this.state = 1256;
	                this.exprList();
	            }

	            this.state = 1259;
	            this.match(CPP14Parser.RightParen);
	            break;
	        case 89:
	            this.state = 1260;
	            this.bracedInitList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	meminitializerid() {
	    let localctx = new MeminitializeridContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, CPP14Parser.RULE_meminitializerid);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1263;
	        this.match(CPP14Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	theOperator() {
	    let localctx = new TheOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, CPP14Parser.RULE_theOperator);
	    var _la = 0;
	    try {
	        this.state = 1316;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1265;
	            this.match(CPP14Parser.New);
	            this.state = 1268;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===87) {
	                this.state = 1266;
	                this.match(CPP14Parser.LeftBracket);
	                this.state = 1267;
	                this.match(CPP14Parser.RightBracket);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1270;
	            this.match(CPP14Parser.Delete);
	            this.state = 1273;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===87) {
	                this.state = 1271;
	                this.match(CPP14Parser.LeftBracket);
	                this.state = 1272;
	                this.match(CPP14Parser.RightBracket);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1275;
	            this.match(CPP14Parser.Plus);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1276;
	            this.match(CPP14Parser.Minus);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1277;
	            this.match(CPP14Parser.Star);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1278;
	            this.match(CPP14Parser.Div);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1279;
	            this.match(CPP14Parser.Mod);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1280;
	            this.match(CPP14Parser.Caret);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1281;
	            this.match(CPP14Parser.And);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1282;
	            this.match(CPP14Parser.Or);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1283;
	            this.match(CPP14Parser.Tilde);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1284;
	            this.match(CPP14Parser.Not);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1285;
	            this.match(CPP14Parser.Assign);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1286;
	            this.match(CPP14Parser.Greater);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1287;
	            this.match(CPP14Parser.Less);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1288;
	            this.match(CPP14Parser.GreaterEqual);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1289;
	            this.match(CPP14Parser.PlusAssign);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1290;
	            this.match(CPP14Parser.MinusAssign);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1291;
	            this.match(CPP14Parser.StarAssign);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1292;
	            this.match(CPP14Parser.ModAssign);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1293;
	            this.match(CPP14Parser.XorAssign);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1294;
	            this.match(CPP14Parser.AndAssign);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1295;
	            this.match(CPP14Parser.OrAssign);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1296;
	            this.match(CPP14Parser.Less);
	            this.state = 1297;
	            this.match(CPP14Parser.Less);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1298;
	            this.match(CPP14Parser.Greater);
	            this.state = 1299;
	            this.match(CPP14Parser.Greater);
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1300;
	            this.match(CPP14Parser.RightShiftAssign);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1301;
	            this.match(CPP14Parser.LeftShiftAssign);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1302;
	            this.match(CPP14Parser.Equal);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1303;
	            this.match(CPP14Parser.NotEqual);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1304;
	            this.match(CPP14Parser.LessEqual);
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1305;
	            this.match(CPP14Parser.AndAnd);
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1306;
	            this.match(CPP14Parser.OrOr);
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1307;
	            this.match(CPP14Parser.PlusPlus);
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1308;
	            this.match(CPP14Parser.MinusMinus);
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 1309;
	            this.match(CPP14Parser.Comma);
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 1310;
	            this.match(CPP14Parser.ArrowStar);
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 1311;
	            this.match(CPP14Parser.Arrow);
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 1312;
	            this.match(CPP14Parser.LeftParen);
	            this.state = 1313;
	            this.match(CPP14Parser.RightParen);
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 1314;
	            this.match(CPP14Parser.LeftBracket);
	            this.state = 1315;
	            this.match(CPP14Parser.RightBracket);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, CPP14Parser.RULE_literal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1318;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 254) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

CPP14Parser.EOF = antlr4.Token.EOF;
CPP14Parser.IntLiteral = 1;
CPP14Parser.CharLiteral = 2;
CPP14Parser.FloatLiteral = 3;
CPP14Parser.StringLiteral = 4;
CPP14Parser.BooleanLiteral = 5;
CPP14Parser.PointerLiteral = 6;
CPP14Parser.UserDefinedLiteral = 7;
CPP14Parser.MultiLineMacro = 8;
CPP14Parser.Directive = 9;
CPP14Parser.Alignas = 10;
CPP14Parser.Alignof = 11;
CPP14Parser.Asm = 12;
CPP14Parser.Auto = 13;
CPP14Parser.Bool = 14;
CPP14Parser.Break = 15;
CPP14Parser.Case = 16;
CPP14Parser.Catch = 17;
CPP14Parser.Char = 18;
CPP14Parser.Char16 = 19;
CPP14Parser.Char32 = 20;
CPP14Parser.Class = 21;
CPP14Parser.Const = 22;
CPP14Parser.Constexpr = 23;
CPP14Parser.Const_cast = 24;
CPP14Parser.Continue = 25;
CPP14Parser.Decltype = 26;
CPP14Parser.Default = 27;
CPP14Parser.Delete = 28;
CPP14Parser.Do = 29;
CPP14Parser.Double = 30;
CPP14Parser.Dynamic_cast = 31;
CPP14Parser.Else = 32;
CPP14Parser.Enum = 33;
CPP14Parser.Explicit = 34;
CPP14Parser.Export = 35;
CPP14Parser.Extern = 36;
CPP14Parser.False_ = 37;
CPP14Parser.Final = 38;
CPP14Parser.Float = 39;
CPP14Parser.For = 40;
CPP14Parser.Friend = 41;
CPP14Parser.Goto = 42;
CPP14Parser.If = 43;
CPP14Parser.Inline = 44;
CPP14Parser.Int = 45;
CPP14Parser.Long = 46;
CPP14Parser.Mutable = 47;
CPP14Parser.Namespace = 48;
CPP14Parser.New = 49;
CPP14Parser.Noexcept = 50;
CPP14Parser.Nullptr = 51;
CPP14Parser.Operator = 52;
CPP14Parser.Override = 53;
CPP14Parser.Private = 54;
CPP14Parser.Protected = 55;
CPP14Parser.Public = 56;
CPP14Parser.Register = 57;
CPP14Parser.Reinterpret_cast = 58;
CPP14Parser.Return = 59;
CPP14Parser.Short = 60;
CPP14Parser.Signed = 61;
CPP14Parser.Sizeof = 62;
CPP14Parser.Static = 63;
CPP14Parser.Static_assert = 64;
CPP14Parser.Static_cast = 65;
CPP14Parser.Struct = 66;
CPP14Parser.Switch = 67;
CPP14Parser.Template = 68;
CPP14Parser.This = 69;
CPP14Parser.Thread_local = 70;
CPP14Parser.Throw = 71;
CPP14Parser.True_ = 72;
CPP14Parser.Try = 73;
CPP14Parser.Typedef = 74;
CPP14Parser.Typeid_ = 75;
CPP14Parser.Typename_ = 76;
CPP14Parser.Union = 77;
CPP14Parser.Unsigned = 78;
CPP14Parser.Using = 79;
CPP14Parser.Virtual = 80;
CPP14Parser.Void = 81;
CPP14Parser.Volatile = 82;
CPP14Parser.Wchar = 83;
CPP14Parser.While = 84;
CPP14Parser.LeftParen = 85;
CPP14Parser.RightParen = 86;
CPP14Parser.LeftBracket = 87;
CPP14Parser.RightBracket = 88;
CPP14Parser.LeftBrace = 89;
CPP14Parser.RightBrace = 90;
CPP14Parser.Plus = 91;
CPP14Parser.Minus = 92;
CPP14Parser.Star = 93;
CPP14Parser.Div = 94;
CPP14Parser.Mod = 95;
CPP14Parser.Caret = 96;
CPP14Parser.And = 97;
CPP14Parser.Or = 98;
CPP14Parser.Tilde = 99;
CPP14Parser.Not = 100;
CPP14Parser.Assign = 101;
CPP14Parser.Less = 102;
CPP14Parser.Greater = 103;
CPP14Parser.PlusAssign = 104;
CPP14Parser.MinusAssign = 105;
CPP14Parser.StarAssign = 106;
CPP14Parser.DivAssign = 107;
CPP14Parser.ModAssign = 108;
CPP14Parser.XorAssign = 109;
CPP14Parser.AndAssign = 110;
CPP14Parser.OrAssign = 111;
CPP14Parser.LeftShiftAssign = 112;
CPP14Parser.RightShiftAssign = 113;
CPP14Parser.Equal = 114;
CPP14Parser.NotEqual = 115;
CPP14Parser.LessEqual = 116;
CPP14Parser.GreaterEqual = 117;
CPP14Parser.AndAnd = 118;
CPP14Parser.OrOr = 119;
CPP14Parser.PlusPlus = 120;
CPP14Parser.MinusMinus = 121;
CPP14Parser.Comma = 122;
CPP14Parser.ArrowStar = 123;
CPP14Parser.Arrow = 124;
CPP14Parser.Question = 125;
CPP14Parser.Colon = 126;
CPP14Parser.Doublecolon = 127;
CPP14Parser.Semi = 128;
CPP14Parser.Dot = 129;
CPP14Parser.DotStar = 130;
CPP14Parser.Ellipsis = 131;
CPP14Parser.Identifier = 132;
CPP14Parser.DecimalLiteral = 133;
CPP14Parser.OctalLiteral = 134;
CPP14Parser.HexadecimalLiteral = 135;
CPP14Parser.BinaryLiteral = 136;
CPP14Parser.Intsuffix = 137;
CPP14Parser.UserDefinedIntLiteral = 138;
CPP14Parser.UserDefinedFloatLiteral = 139;
CPP14Parser.UserDefinedStringLiteral = 140;
CPP14Parser.UserDefinedCharLiteral = 141;
CPP14Parser.Whitespace = 142;
CPP14Parser.Newline = 143;
CPP14Parser.BlockComment = 144;
CPP14Parser.LineComment = 145;

CPP14Parser.RULE_translationUnit = 0;
CPP14Parser.RULE_primaryExpr = 1;
CPP14Parser.RULE_idExpr = 2;
CPP14Parser.RULE_unqualifiedId = 3;
CPP14Parser.RULE_qualifiedId = 4;
CPP14Parser.RULE_nestedNameSpecifier = 5;
CPP14Parser.RULE_lambdaExpr = 6;
CPP14Parser.RULE_lambdaIntroducer = 7;
CPP14Parser.RULE_lambdaCapture = 8;
CPP14Parser.RULE_captureDefault = 9;
CPP14Parser.RULE_captureList = 10;
CPP14Parser.RULE_capture = 11;
CPP14Parser.RULE_simpleCapture = 12;
CPP14Parser.RULE_initcapture = 13;
CPP14Parser.RULE_lambdaDeclarator = 14;
CPP14Parser.RULE_postfixExpr = 15;
CPP14Parser.RULE_typeIdOfTheTypeId = 16;
CPP14Parser.RULE_exprList = 17;
CPP14Parser.RULE_pseudoDestructorName = 18;
CPP14Parser.RULE_unaryExpr = 19;
CPP14Parser.RULE_unaryOperator = 20;
CPP14Parser.RULE_newExpr_ = 21;
CPP14Parser.RULE_newPlacement = 22;
CPP14Parser.RULE_newTypeId = 23;
CPP14Parser.RULE_newDeclarator_ = 24;
CPP14Parser.RULE_noPointerNewDeclarator = 25;
CPP14Parser.RULE_newInitializer_ = 26;
CPP14Parser.RULE_deleteExpr = 27;
CPP14Parser.RULE_castExpr = 28;
CPP14Parser.RULE_pointerMemberExpr = 29;
CPP14Parser.RULE_multiplicativeExpr = 30;
CPP14Parser.RULE_additiveExpr = 31;
CPP14Parser.RULE_shiftExpr = 32;
CPP14Parser.RULE_shiftOperator = 33;
CPP14Parser.RULE_relationalExpr = 34;
CPP14Parser.RULE_equalityExpr = 35;
CPP14Parser.RULE_andExpr = 36;
CPP14Parser.RULE_exclusiveOrExpr = 37;
CPP14Parser.RULE_inclusiveOrExpr = 38;
CPP14Parser.RULE_logicalAndExpr = 39;
CPP14Parser.RULE_logicalOrExpr = 40;
CPP14Parser.RULE_conditionalExpr = 41;
CPP14Parser.RULE_assignmentExpr = 42;
CPP14Parser.RULE_assignmentOperator = 43;
CPP14Parser.RULE_expr = 44;
CPP14Parser.RULE_constantExpr = 45;
CPP14Parser.RULE_statement = 46;
CPP14Parser.RULE_labeledStatement = 47;
CPP14Parser.RULE_exprStatement = 48;
CPP14Parser.RULE_compoundStatement = 49;
CPP14Parser.RULE_statementSeq = 50;
CPP14Parser.RULE_selectionStatement = 51;
CPP14Parser.RULE_condition = 52;
CPP14Parser.RULE_iterationStatement = 53;
CPP14Parser.RULE_forInitStatement = 54;
CPP14Parser.RULE_forRangeDeclaration = 55;
CPP14Parser.RULE_forRangeInitializer = 56;
CPP14Parser.RULE_jumpStatement = 57;
CPP14Parser.RULE_declarationStatement = 58;
CPP14Parser.RULE_declarationseq = 59;
CPP14Parser.RULE_declaration = 60;
CPP14Parser.RULE_blockDeclaration = 61;
CPP14Parser.RULE_simpleDeclaration = 62;
CPP14Parser.RULE_emptyDeclaration_ = 63;
CPP14Parser.RULE_declSpecifier = 64;
CPP14Parser.RULE_declSpecifierSeq = 65;
CPP14Parser.RULE_functionSpecifier = 66;
CPP14Parser.RULE_typedefName = 67;
CPP14Parser.RULE_typeSpecifier = 68;
CPP14Parser.RULE_trailingTypeSpecifier = 69;
CPP14Parser.RULE_typeSpecifierSeq = 70;
CPP14Parser.RULE_trailingTypeSpecifierSeq = 71;
CPP14Parser.RULE_simpleTypeLengthModifier = 72;
CPP14Parser.RULE_simpleTypeSignednessModifier = 73;
CPP14Parser.RULE_simpleTypeSpecifier = 74;
CPP14Parser.RULE_theTypeName = 75;
CPP14Parser.RULE_namespaceName = 76;
CPP14Parser.RULE_originalNamespaceName = 77;
CPP14Parser.RULE_namespaceDefinition = 78;
CPP14Parser.RULE_usingDeclaration = 79;
CPP14Parser.RULE_usingDirective = 80;
CPP14Parser.RULE_initDeclaratorList = 81;
CPP14Parser.RULE_initDeclarator = 82;
CPP14Parser.RULE_declarator = 83;
CPP14Parser.RULE_pointerDeclarator = 84;
CPP14Parser.RULE_noPointerDeclarator = 85;
CPP14Parser.RULE_parametersAndQualifiers = 86;
CPP14Parser.RULE_trailingReturnType = 87;
CPP14Parser.RULE_pointerOperator = 88;
CPP14Parser.RULE_cvqualifierseq = 89;
CPP14Parser.RULE_cvQualifier = 90;
CPP14Parser.RULE_refqualifier = 91;
CPP14Parser.RULE_declaratorid = 92;
CPP14Parser.RULE_theTypeId = 93;
CPP14Parser.RULE_abstractDeclarator = 94;
CPP14Parser.RULE_pointerAbstractDeclarator = 95;
CPP14Parser.RULE_noPointerAbstractDeclarator = 96;
CPP14Parser.RULE_abstractPackDeclarator = 97;
CPP14Parser.RULE_noPointerAbstractPackDeclarator = 98;
CPP14Parser.RULE_parameterDeclarationClause = 99;
CPP14Parser.RULE_parameterDeclarationList = 100;
CPP14Parser.RULE_parameterDeclaration = 101;
CPP14Parser.RULE_functionDefinition = 102;
CPP14Parser.RULE_functionBody = 103;
CPP14Parser.RULE_initializer = 104;
CPP14Parser.RULE_braceOrEqualInitializer = 105;
CPP14Parser.RULE_initializerClause = 106;
CPP14Parser.RULE_initializerList = 107;
CPP14Parser.RULE_bracedInitList = 108;
CPP14Parser.RULE_className = 109;
CPP14Parser.RULE_classSpecifier = 110;
CPP14Parser.RULE_classHead = 111;
CPP14Parser.RULE_classHeadName = 112;
CPP14Parser.RULE_classVirtSpecifier = 113;
CPP14Parser.RULE_classKey = 114;
CPP14Parser.RULE_memberSpecification = 115;
CPP14Parser.RULE_memberdeclaration = 116;
CPP14Parser.RULE_memberDeclaratorList = 117;
CPP14Parser.RULE_memberDeclarator = 118;
CPP14Parser.RULE_pureSpecifier = 119;
CPP14Parser.RULE_accessSpecifier = 120;
CPP14Parser.RULE_constructorInitializer = 121;
CPP14Parser.RULE_memInitializerList = 122;
CPP14Parser.RULE_memInitializer = 123;
CPP14Parser.RULE_meminitializerid = 124;
CPP14Parser.RULE_theOperator = 125;
CPP14Parser.RULE_literal = 126;

class TranslationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_translationUnit;
    }

	EOF() {
	    return this.getToken(CPP14Parser.EOF, 0);
	};

	declarationseq() {
	    return this.getTypedRuleContext(DeclarationseqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTranslationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTranslationUnit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTranslationUnit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_primaryExpr;
    }

	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	This() {
	    return this.getToken(CPP14Parser.This, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	idExpr() {
	    return this.getTypedRuleContext(IdExprContext,0);
	};

	lambdaExpr() {
	    return this.getTypedRuleContext(LambdaExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterPrimaryExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitPrimaryExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitPrimaryExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_idExpr;
    }

	unqualifiedId() {
	    return this.getTypedRuleContext(UnqualifiedIdContext,0);
	};

	qualifiedId() {
	    return this.getTypedRuleContext(QualifiedIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterIdExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitIdExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitIdExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnqualifiedIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_unqualifiedId;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	Tilde() {
	    return this.getToken(CPP14Parser.Tilde, 0);
	};

	className() {
	    return this.getTypedRuleContext(ClassNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterUnqualifiedId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitUnqualifiedId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitUnqualifiedId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_qualifiedId;
    }

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	unqualifiedId() {
	    return this.getTypedRuleContext(UnqualifiedIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterQualifiedId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitQualifiedId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitQualifiedId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NestedNameSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_nestedNameSpecifier;
    }

	Doublecolon() {
	    return this.getToken(CPP14Parser.Doublecolon, 0);
	};

	theTypeName() {
	    return this.getTypedRuleContext(TheTypeNameContext,0);
	};

	namespaceName() {
	    return this.getTypedRuleContext(NamespaceNameContext,0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNestedNameSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNestedNameSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNestedNameSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_lambdaExpr;
    }

	lambdaIntroducer() {
	    return this.getTypedRuleContext(LambdaIntroducerContext,0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	lambdaDeclarator() {
	    return this.getTypedRuleContext(LambdaDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLambdaExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLambdaExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLambdaExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaIntroducerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_lambdaIntroducer;
    }

	LeftBracket() {
	    return this.getToken(CPP14Parser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CPP14Parser.RightBracket, 0);
	};

	lambdaCapture() {
	    return this.getTypedRuleContext(LambdaCaptureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLambdaIntroducer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLambdaIntroducer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLambdaIntroducer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaCaptureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_lambdaCapture;
    }

	captureList() {
	    return this.getTypedRuleContext(CaptureListContext,0);
	};

	captureDefault() {
	    return this.getTypedRuleContext(CaptureDefaultContext,0);
	};

	Comma() {
	    return this.getToken(CPP14Parser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLambdaCapture(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLambdaCapture(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLambdaCapture(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaptureDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_captureDefault;
    }

	And() {
	    return this.getToken(CPP14Parser.And, 0);
	};

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterCaptureDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitCaptureDefault(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitCaptureDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaptureListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_captureList;
    }

	capture = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaptureContext);
	    } else {
	        return this.getTypedRuleContext(CaptureContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	Ellipsis() {
	    return this.getToken(CPP14Parser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterCaptureList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitCaptureList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitCaptureList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaptureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_capture;
    }

	simpleCapture() {
	    return this.getTypedRuleContext(SimpleCaptureContext,0);
	};

	initcapture() {
	    return this.getTypedRuleContext(InitcaptureContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterCapture(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitCapture(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitCapture(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleCaptureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_simpleCapture;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	And() {
	    return this.getToken(CPP14Parser.And, 0);
	};

	This() {
	    return this.getToken(CPP14Parser.This, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterSimpleCapture(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitSimpleCapture(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitSimpleCapture(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InitcaptureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_initcapture;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	initializer() {
	    return this.getTypedRuleContext(InitializerContext,0);
	};

	And() {
	    return this.getToken(CPP14Parser.And, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterInitcapture(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitInitcapture(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitInitcapture(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_lambdaDeclarator;
    }

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	parameterDeclarationClause() {
	    return this.getTypedRuleContext(ParameterDeclarationClauseContext,0);
	};

	Mutable() {
	    return this.getToken(CPP14Parser.Mutable, 0);
	};

	trailingReturnType() {
	    return this.getTypedRuleContext(TrailingReturnTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLambdaDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLambdaDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLambdaDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PostfixExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_postfixExpr;
    }

	primaryExpr() {
	    return this.getTypedRuleContext(PrimaryExprContext,0);
	};

	simpleTypeSpecifier() {
	    return this.getTypedRuleContext(SimpleTypeSpecifierContext,0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	Less() {
	    return this.getToken(CPP14Parser.Less, 0);
	};

	theTypeId() {
	    return this.getTypedRuleContext(TheTypeIdContext,0);
	};

	Greater() {
	    return this.getToken(CPP14Parser.Greater, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	Dynamic_cast() {
	    return this.getToken(CPP14Parser.Dynamic_cast, 0);
	};

	Static_cast() {
	    return this.getToken(CPP14Parser.Static_cast, 0);
	};

	Reinterpret_cast() {
	    return this.getToken(CPP14Parser.Reinterpret_cast, 0);
	};

	Const_cast() {
	    return this.getToken(CPP14Parser.Const_cast, 0);
	};

	typeIdOfTheTypeId() {
	    return this.getTypedRuleContext(TypeIdOfTheTypeIdContext,0);
	};

	postfixExpr() {
	    return this.getTypedRuleContext(PostfixExprContext,0);
	};

	LeftBracket() {
	    return this.getToken(CPP14Parser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CPP14Parser.RightBracket, 0);
	};

	Dot() {
	    return this.getToken(CPP14Parser.Dot, 0);
	};

	Arrow() {
	    return this.getToken(CPP14Parser.Arrow, 0);
	};

	idExpr() {
	    return this.getTypedRuleContext(IdExprContext,0);
	};

	pseudoDestructorName() {
	    return this.getTypedRuleContext(PseudoDestructorNameContext,0);
	};

	PlusPlus() {
	    return this.getToken(CPP14Parser.PlusPlus, 0);
	};

	MinusMinus() {
	    return this.getToken(CPP14Parser.MinusMinus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterPostfixExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitPostfixExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitPostfixExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeIdOfTheTypeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_typeIdOfTheTypeId;
    }

	Typeid_() {
	    return this.getToken(CPP14Parser.Typeid_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTypeIdOfTheTypeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTypeIdOfTheTypeId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTypeIdOfTheTypeId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_exprList;
    }

	initializerList() {
	    return this.getTypedRuleContext(InitializerListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterExprList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitExprList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitExprList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PseudoDestructorNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_pseudoDestructorName;
    }

	Tilde() {
	    return this.getToken(CPP14Parser.Tilde, 0);
	};

	theTypeName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TheTypeNameContext);
	    } else {
	        return this.getTypedRuleContext(TheTypeNameContext,i);
	    }
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	Doublecolon() {
	    return this.getToken(CPP14Parser.Doublecolon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterPseudoDestructorName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitPseudoDestructorName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitPseudoDestructorName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnaryExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_unaryExpr;
    }

	postfixExpr() {
	    return this.getTypedRuleContext(PostfixExprContext,0);
	};

	unaryExpr() {
	    return this.getTypedRuleContext(UnaryExprContext,0);
	};

	PlusPlus() {
	    return this.getToken(CPP14Parser.PlusPlus, 0);
	};

	MinusMinus() {
	    return this.getToken(CPP14Parser.MinusMinus, 0);
	};

	unaryOperator() {
	    return this.getTypedRuleContext(UnaryOperatorContext,0);
	};

	Sizeof() {
	    return this.getToken(CPP14Parser.Sizeof, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	theTypeId() {
	    return this.getTypedRuleContext(TheTypeIdContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	Ellipsis() {
	    return this.getToken(CPP14Parser.Ellipsis, 0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	Alignof() {
	    return this.getToken(CPP14Parser.Alignof, 0);
	};

	newExpr_() {
	    return this.getTypedRuleContext(NewExpr_Context,0);
	};

	deleteExpr() {
	    return this.getTypedRuleContext(DeleteExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterUnaryExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitUnaryExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitUnaryExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnaryOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_unaryOperator;
    }

	Or() {
	    return this.getToken(CPP14Parser.Or, 0);
	};

	Star() {
	    return this.getToken(CPP14Parser.Star, 0);
	};

	And() {
	    return this.getToken(CPP14Parser.And, 0);
	};

	Plus() {
	    return this.getToken(CPP14Parser.Plus, 0);
	};

	Tilde() {
	    return this.getToken(CPP14Parser.Tilde, 0);
	};

	Minus() {
	    return this.getToken(CPP14Parser.Minus, 0);
	};

	Not() {
	    return this.getToken(CPP14Parser.Not, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterUnaryOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitUnaryOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitUnaryOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewExpr_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_newExpr_;
    }

	New() {
	    return this.getToken(CPP14Parser.New, 0);
	};

	newTypeId() {
	    return this.getTypedRuleContext(NewTypeIdContext,0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	theTypeId() {
	    return this.getTypedRuleContext(TheTypeIdContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	Doublecolon() {
	    return this.getToken(CPP14Parser.Doublecolon, 0);
	};

	newPlacement() {
	    return this.getTypedRuleContext(NewPlacementContext,0);
	};

	newInitializer_() {
	    return this.getTypedRuleContext(NewInitializer_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNewExpr_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNewExpr_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNewExpr_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewPlacementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_newPlacement;
    }

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNewPlacement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNewPlacement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNewPlacement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewTypeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_newTypeId;
    }

	typeSpecifierSeq() {
	    return this.getTypedRuleContext(TypeSpecifierSeqContext,0);
	};

	newDeclarator_() {
	    return this.getTypedRuleContext(NewDeclarator_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNewTypeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNewTypeId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNewTypeId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewDeclarator_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_newDeclarator_;
    }

	pointerOperator() {
	    return this.getTypedRuleContext(PointerOperatorContext,0);
	};

	newDeclarator_() {
	    return this.getTypedRuleContext(NewDeclarator_Context,0);
	};

	noPointerNewDeclarator() {
	    return this.getTypedRuleContext(NoPointerNewDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNewDeclarator_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNewDeclarator_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNewDeclarator_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoPointerNewDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_noPointerNewDeclarator;
    }

	LeftBracket() {
	    return this.getToken(CPP14Parser.LeftBracket, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	RightBracket() {
	    return this.getToken(CPP14Parser.RightBracket, 0);
	};

	noPointerNewDeclarator() {
	    return this.getTypedRuleContext(NoPointerNewDeclaratorContext,0);
	};

	constantExpr() {
	    return this.getTypedRuleContext(ConstantExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNoPointerNewDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNoPointerNewDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNoPointerNewDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NewInitializer_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_newInitializer_;
    }

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNewInitializer_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNewInitializer_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNewInitializer_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeleteExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_deleteExpr;
    }

	Delete() {
	    return this.getToken(CPP14Parser.Delete, 0);
	};

	castExpr() {
	    return this.getTypedRuleContext(CastExprContext,0);
	};

	Doublecolon() {
	    return this.getToken(CPP14Parser.Doublecolon, 0);
	};

	LeftBracket() {
	    return this.getToken(CPP14Parser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CPP14Parser.RightBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDeleteExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDeleteExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDeleteExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CastExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_castExpr;
    }

	unaryExpr() {
	    return this.getTypedRuleContext(UnaryExprContext,0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	theTypeId() {
	    return this.getTypedRuleContext(TheTypeIdContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	castExpr() {
	    return this.getTypedRuleContext(CastExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterCastExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitCastExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitCastExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PointerMemberExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_pointerMemberExpr;
    }

	castExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CastExprContext);
	    } else {
	        return this.getTypedRuleContext(CastExprContext,i);
	    }
	};

	DotStar = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.DotStar);
	    } else {
	        return this.getToken(CPP14Parser.DotStar, i);
	    }
	};


	ArrowStar = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.ArrowStar);
	    } else {
	        return this.getToken(CPP14Parser.ArrowStar, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterPointerMemberExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitPointerMemberExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitPointerMemberExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultiplicativeExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_multiplicativeExpr;
    }

	pointerMemberExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PointerMemberExprContext);
	    } else {
	        return this.getTypedRuleContext(PointerMemberExprContext,i);
	    }
	};

	Star = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Star);
	    } else {
	        return this.getToken(CPP14Parser.Star, i);
	    }
	};


	Div = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Div);
	    } else {
	        return this.getToken(CPP14Parser.Div, i);
	    }
	};


	Mod = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Mod);
	    } else {
	        return this.getToken(CPP14Parser.Mod, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterMultiplicativeExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitMultiplicativeExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitMultiplicativeExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AdditiveExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_additiveExpr;
    }

	multiplicativeExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeExprContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeExprContext,i);
	    }
	};

	Plus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Plus);
	    } else {
	        return this.getToken(CPP14Parser.Plus, i);
	    }
	};


	Minus = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Minus);
	    } else {
	        return this.getToken(CPP14Parser.Minus, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAdditiveExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAdditiveExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAdditiveExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShiftExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_shiftExpr;
    }

	additiveExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExprContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExprContext,i);
	    }
	};

	shiftOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ShiftOperatorContext);
	    } else {
	        return this.getTypedRuleContext(ShiftOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterShiftExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitShiftExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitShiftExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShiftOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_shiftOperator;
    }

	Greater = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Greater);
	    } else {
	        return this.getToken(CPP14Parser.Greater, i);
	    }
	};


	Less = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Less);
	    } else {
	        return this.getToken(CPP14Parser.Less, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterShiftOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitShiftOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitShiftOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RelationalExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_relationalExpr;
    }

	shiftExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ShiftExprContext);
	    } else {
	        return this.getTypedRuleContext(ShiftExprContext,i);
	    }
	};

	Less = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Less);
	    } else {
	        return this.getToken(CPP14Parser.Less, i);
	    }
	};


	Greater = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Greater);
	    } else {
	        return this.getToken(CPP14Parser.Greater, i);
	    }
	};


	LessEqual = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.LessEqual);
	    } else {
	        return this.getToken(CPP14Parser.LessEqual, i);
	    }
	};


	GreaterEqual = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.GreaterEqual);
	    } else {
	        return this.getToken(CPP14Parser.GreaterEqual, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterRelationalExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitRelationalExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitRelationalExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EqualityExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_equalityExpr;
    }

	relationalExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExprContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExprContext,i);
	    }
	};

	Equal = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Equal);
	    } else {
	        return this.getToken(CPP14Parser.Equal, i);
	    }
	};


	NotEqual = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.NotEqual);
	    } else {
	        return this.getToken(CPP14Parser.NotEqual, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterEqualityExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitEqualityExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitEqualityExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AndExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_andExpr;
    }

	equalityExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EqualityExprContext);
	    } else {
	        return this.getTypedRuleContext(EqualityExprContext,i);
	    }
	};

	And = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.And);
	    } else {
	        return this.getToken(CPP14Parser.And, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAndExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAndExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAndExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExclusiveOrExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_exclusiveOrExpr;
    }

	andExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AndExprContext);
	    } else {
	        return this.getTypedRuleContext(AndExprContext,i);
	    }
	};

	Caret = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Caret);
	    } else {
	        return this.getToken(CPP14Parser.Caret, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterExclusiveOrExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitExclusiveOrExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitExclusiveOrExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InclusiveOrExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_inclusiveOrExpr;
    }

	exclusiveOrExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExclusiveOrExprContext);
	    } else {
	        return this.getTypedRuleContext(ExclusiveOrExprContext,i);
	    }
	};

	Or = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Or);
	    } else {
	        return this.getToken(CPP14Parser.Or, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterInclusiveOrExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitInclusiveOrExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitInclusiveOrExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogicalAndExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_logicalAndExpr;
    }

	inclusiveOrExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InclusiveOrExprContext);
	    } else {
	        return this.getTypedRuleContext(InclusiveOrExprContext,i);
	    }
	};

	AndAnd = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.AndAnd);
	    } else {
	        return this.getToken(CPP14Parser.AndAnd, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLogicalAndExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLogicalAndExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLogicalAndExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogicalOrExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_logicalOrExpr;
    }

	logicalAndExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalAndExprContext);
	    } else {
	        return this.getTypedRuleContext(LogicalAndExprContext,i);
	    }
	};

	OrOr = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.OrOr);
	    } else {
	        return this.getToken(CPP14Parser.OrOr, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLogicalOrExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLogicalOrExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLogicalOrExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConditionalExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_conditionalExpr;
    }

	logicalOrExpr() {
	    return this.getTypedRuleContext(LogicalOrExprContext,0);
	};

	Question() {
	    return this.getToken(CPP14Parser.Question, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	Colon() {
	    return this.getToken(CPP14Parser.Colon, 0);
	};

	assignmentExpr() {
	    return this.getTypedRuleContext(AssignmentExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterConditionalExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitConditionalExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitConditionalExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_assignmentExpr;
    }

	conditionalExpr() {
	    return this.getTypedRuleContext(ConditionalExprContext,0);
	};

	logicalOrExpr() {
	    return this.getTypedRuleContext(LogicalOrExprContext,0);
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	initializerClause() {
	    return this.getTypedRuleContext(InitializerClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAssignmentExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAssignmentExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAssignmentExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_assignmentOperator;
    }

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	StarAssign() {
	    return this.getToken(CPP14Parser.StarAssign, 0);
	};

	DivAssign() {
	    return this.getToken(CPP14Parser.DivAssign, 0);
	};

	ModAssign() {
	    return this.getToken(CPP14Parser.ModAssign, 0);
	};

	PlusAssign() {
	    return this.getToken(CPP14Parser.PlusAssign, 0);
	};

	MinusAssign() {
	    return this.getToken(CPP14Parser.MinusAssign, 0);
	};

	RightShiftAssign() {
	    return this.getToken(CPP14Parser.RightShiftAssign, 0);
	};

	LeftShiftAssign() {
	    return this.getToken(CPP14Parser.LeftShiftAssign, 0);
	};

	AndAssign() {
	    return this.getToken(CPP14Parser.AndAssign, 0);
	};

	XorAssign() {
	    return this.getToken(CPP14Parser.XorAssign, 0);
	};

	OrAssign() {
	    return this.getToken(CPP14Parser.OrAssign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAssignmentOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAssignmentOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_expr;
    }

	assignmentExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentExprContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentExprContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_constantExpr;
    }

	conditionalExpr() {
	    return this.getTypedRuleContext(ConditionalExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterConstantExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitConstantExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitConstantExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_statement;
    }

	labeledStatement() {
	    return this.getTypedRuleContext(LabeledStatementContext,0);
	};

	declarationStatement() {
	    return this.getTypedRuleContext(DeclarationStatementContext,0);
	};

	exprStatement() {
	    return this.getTypedRuleContext(ExprStatementContext,0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	selectionStatement() {
	    return this.getTypedRuleContext(SelectionStatementContext,0);
	};

	iterationStatement() {
	    return this.getTypedRuleContext(IterationStatementContext,0);
	};

	jumpStatement() {
	    return this.getTypedRuleContext(JumpStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabeledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_labeledStatement;
    }

	Colon() {
	    return this.getToken(CPP14Parser.Colon, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	Case() {
	    return this.getToken(CPP14Parser.Case, 0);
	};

	constantExpr() {
	    return this.getTypedRuleContext(ConstantExprContext,0);
	};

	Default() {
	    return this.getToken(CPP14Parser.Default, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLabeledStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLabeledStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLabeledStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_exprStatement;
    }

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterExprStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitExprStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitExprStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompoundStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_compoundStatement;
    }

	LeftBrace() {
	    return this.getToken(CPP14Parser.LeftBrace, 0);
	};

	RightBrace() {
	    return this.getToken(CPP14Parser.RightBrace, 0);
	};

	statementSeq() {
	    return this.getTypedRuleContext(StatementSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterCompoundStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitCompoundStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitCompoundStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_statementSeq;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterStatementSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitStatementSeq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitStatementSeq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_selectionStatement;
    }

	If() {
	    return this.getToken(CPP14Parser.If, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	Else() {
	    return this.getToken(CPP14Parser.Else, 0);
	};

	Switch() {
	    return this.getToken(CPP14Parser.Switch, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterSelectionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitSelectionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitSelectionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_condition;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	initializerClause() {
	    return this.getTypedRuleContext(InitializerClauseContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IterationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_iterationStatement;
    }

	While() {
	    return this.getToken(CPP14Parser.While, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	Do() {
	    return this.getToken(CPP14Parser.Do, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	For() {
	    return this.getToken(CPP14Parser.For, 0);
	};

	forInitStatement() {
	    return this.getTypedRuleContext(ForInitStatementContext,0);
	};

	forRangeDeclaration() {
	    return this.getTypedRuleContext(ForRangeDeclarationContext,0);
	};

	Colon() {
	    return this.getToken(CPP14Parser.Colon, 0);
	};

	forRangeInitializer() {
	    return this.getTypedRuleContext(ForRangeInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterIterationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitIterationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitIterationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForInitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_forInitStatement;
    }

	exprStatement() {
	    return this.getTypedRuleContext(ExprStatementContext,0);
	};

	simpleDeclaration() {
	    return this.getTypedRuleContext(SimpleDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterForInitStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitForInitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitForInitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForRangeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_forRangeDeclaration;
    }

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterForRangeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitForRangeDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitForRangeDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForRangeInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_forRangeInitializer;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterForRangeInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitForRangeInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitForRangeInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JumpStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_jumpStatement;
    }

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	Break() {
	    return this.getToken(CPP14Parser.Break, 0);
	};

	Continue() {
	    return this.getToken(CPP14Parser.Continue, 0);
	};

	Return() {
	    return this.getToken(CPP14Parser.Return, 0);
	};

	Goto() {
	    return this.getToken(CPP14Parser.Goto, 0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterJumpStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitJumpStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitJumpStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_declarationStatement;
    }

	blockDeclaration() {
	    return this.getTypedRuleContext(BlockDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDeclarationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDeclarationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclarationseqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_declarationseq;
    }

	declaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclarationContext);
	    } else {
	        return this.getTypedRuleContext(DeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDeclarationseq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDeclarationseq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDeclarationseq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_declaration;
    }

	blockDeclaration() {
	    return this.getTypedRuleContext(BlockDeclarationContext,0);
	};

	functionDefinition() {
	    return this.getTypedRuleContext(FunctionDefinitionContext,0);
	};

	namespaceDefinition() {
	    return this.getTypedRuleContext(NamespaceDefinitionContext,0);
	};

	emptyDeclaration_() {
	    return this.getTypedRuleContext(EmptyDeclaration_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_blockDeclaration;
    }

	simpleDeclaration() {
	    return this.getTypedRuleContext(SimpleDeclarationContext,0);
	};

	usingDeclaration() {
	    return this.getTypedRuleContext(UsingDeclarationContext,0);
	};

	usingDirective() {
	    return this.getTypedRuleContext(UsingDirectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterBlockDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitBlockDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitBlockDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_simpleDeclaration;
    }

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	initDeclaratorList() {
	    return this.getTypedRuleContext(InitDeclaratorListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterSimpleDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitSimpleDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitSimpleDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EmptyDeclaration_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_emptyDeclaration_;
    }

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterEmptyDeclaration_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitEmptyDeclaration_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitEmptyDeclaration_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_declSpecifier;
    }

	Friend() {
	    return this.getToken(CPP14Parser.Friend, 0);
	};

	typeSpecifier() {
	    return this.getTypedRuleContext(TypeSpecifierContext,0);
	};

	functionSpecifier() {
	    return this.getTypedRuleContext(FunctionSpecifierContext,0);
	};

	Typedef() {
	    return this.getToken(CPP14Parser.Typedef, 0);
	};

	Constexpr() {
	    return this.getToken(CPP14Parser.Constexpr, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDeclSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDeclSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDeclSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclSpecifierSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_declSpecifierSeq;
    }

	declSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(DeclSpecifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDeclSpecifierSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDeclSpecifierSeq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDeclSpecifierSeq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_functionSpecifier;
    }

	Inline() {
	    return this.getToken(CPP14Parser.Inline, 0);
	};

	Explicit() {
	    return this.getToken(CPP14Parser.Explicit, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterFunctionSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitFunctionSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitFunctionSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypedefNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_typedefName;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTypedefName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTypedefName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTypedefName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_typeSpecifier;
    }

	trailingTypeSpecifier() {
	    return this.getTypedRuleContext(TrailingTypeSpecifierContext,0);
	};

	classSpecifier() {
	    return this.getTypedRuleContext(ClassSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTypeSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTypeSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrailingTypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_trailingTypeSpecifier;
    }

	simpleTypeSpecifier() {
	    return this.getTypedRuleContext(SimpleTypeSpecifierContext,0);
	};

	cvQualifier() {
	    return this.getTypedRuleContext(CvQualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTrailingTypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTrailingTypeSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTrailingTypeSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeSpecifierSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_typeSpecifierSeq;
    }

	typeSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(TypeSpecifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTypeSpecifierSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTypeSpecifierSeq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTypeSpecifierSeq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrailingTypeSpecifierSeqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_trailingTypeSpecifierSeq;
    }

	trailingTypeSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TrailingTypeSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(TrailingTypeSpecifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTrailingTypeSpecifierSeq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTrailingTypeSpecifierSeq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTrailingTypeSpecifierSeq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleTypeLengthModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_simpleTypeLengthModifier;
    }

	Short() {
	    return this.getToken(CPP14Parser.Short, 0);
	};

	Long() {
	    return this.getToken(CPP14Parser.Long, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterSimpleTypeLengthModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitSimpleTypeLengthModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitSimpleTypeLengthModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleTypeSignednessModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_simpleTypeSignednessModifier;
    }

	Unsigned() {
	    return this.getToken(CPP14Parser.Unsigned, 0);
	};

	Signed() {
	    return this.getToken(CPP14Parser.Signed, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterSimpleTypeSignednessModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitSimpleTypeSignednessModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitSimpleTypeSignednessModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleTypeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_simpleTypeSpecifier;
    }

	theTypeName() {
	    return this.getTypedRuleContext(TheTypeNameContext,0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	Char() {
	    return this.getToken(CPP14Parser.Char, 0);
	};

	Char16() {
	    return this.getToken(CPP14Parser.Char16, 0);
	};

	Char32() {
	    return this.getToken(CPP14Parser.Char32, 0);
	};

	Wchar() {
	    return this.getToken(CPP14Parser.Wchar, 0);
	};

	Bool() {
	    return this.getToken(CPP14Parser.Bool, 0);
	};

	Short() {
	    return this.getToken(CPP14Parser.Short, 0);
	};

	Int() {
	    return this.getToken(CPP14Parser.Int, 0);
	};

	Long() {
	    return this.getToken(CPP14Parser.Long, 0);
	};

	Float() {
	    return this.getToken(CPP14Parser.Float, 0);
	};

	Signed() {
	    return this.getToken(CPP14Parser.Signed, 0);
	};

	Unsigned() {
	    return this.getToken(CPP14Parser.Unsigned, 0);
	};

	Double() {
	    return this.getToken(CPP14Parser.Double, 0);
	};

	Void() {
	    return this.getToken(CPP14Parser.Void, 0);
	};

	Auto() {
	    return this.getToken(CPP14Parser.Auto, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterSimpleTypeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitSimpleTypeSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitSimpleTypeSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TheTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_theTypeName;
    }

	className() {
	    return this.getTypedRuleContext(ClassNameContext,0);
	};

	typedefName() {
	    return this.getTypedRuleContext(TypedefNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTheTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTheTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTheTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NamespaceNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_namespaceName;
    }

	originalNamespaceName() {
	    return this.getTypedRuleContext(OriginalNamespaceNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNamespaceName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNamespaceName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNamespaceName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OriginalNamespaceNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_originalNamespaceName;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterOriginalNamespaceName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitOriginalNamespaceName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitOriginalNamespaceName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NamespaceDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_namespaceDefinition;
        this.namespaceBody = null;
    }

	Namespace() {
	    return this.getToken(CPP14Parser.Namespace, 0);
	};

	LeftBrace() {
	    return this.getToken(CPP14Parser.LeftBrace, 0);
	};

	RightBrace() {
	    return this.getToken(CPP14Parser.RightBrace, 0);
	};

	Inline() {
	    return this.getToken(CPP14Parser.Inline, 0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	originalNamespaceName() {
	    return this.getTypedRuleContext(OriginalNamespaceNameContext,0);
	};

	declarationseq() {
	    return this.getTypedRuleContext(DeclarationseqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNamespaceDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNamespaceDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNamespaceDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UsingDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_usingDeclaration;
    }

	Using() {
	    return this.getToken(CPP14Parser.Using, 0);
	};

	unqualifiedId() {
	    return this.getTypedRuleContext(UnqualifiedIdContext,0);
	};

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	Doublecolon() {
	    return this.getToken(CPP14Parser.Doublecolon, 0);
	};

	Typename_() {
	    return this.getToken(CPP14Parser.Typename_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterUsingDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitUsingDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitUsingDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UsingDirectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_usingDirective;
    }

	Using() {
	    return this.getToken(CPP14Parser.Using, 0);
	};

	Namespace() {
	    return this.getToken(CPP14Parser.Namespace, 0);
	};

	namespaceName() {
	    return this.getTypedRuleContext(NamespaceNameContext,0);
	};

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterUsingDirective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitUsingDirective(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitUsingDirective(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InitDeclaratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_initDeclaratorList;
    }

	initDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(InitDeclaratorContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterInitDeclaratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitInitDeclaratorList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitInitDeclaratorList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InitDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_initDeclarator;
    }

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	initializer() {
	    return this.getTypedRuleContext(InitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterInitDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitInitDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitInitDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_declarator;
    }

	pointerDeclarator() {
	    return this.getTypedRuleContext(PointerDeclaratorContext,0);
	};

	noPointerDeclarator() {
	    return this.getTypedRuleContext(NoPointerDeclaratorContext,0);
	};

	parametersAndQualifiers() {
	    return this.getTypedRuleContext(ParametersAndQualifiersContext,0);
	};

	trailingReturnType() {
	    return this.getTypedRuleContext(TrailingReturnTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PointerDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_pointerDeclarator;
    }

	noPointerDeclarator() {
	    return this.getTypedRuleContext(NoPointerDeclaratorContext,0);
	};

	pointerOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PointerOperatorContext);
	    } else {
	        return this.getTypedRuleContext(PointerOperatorContext,i);
	    }
	};

	Const = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Const);
	    } else {
	        return this.getToken(CPP14Parser.Const, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterPointerDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitPointerDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitPointerDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoPointerDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_noPointerDeclarator;
    }

	declaratorid() {
	    return this.getTypedRuleContext(DeclaratoridContext,0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	pointerDeclarator() {
	    return this.getTypedRuleContext(PointerDeclaratorContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	noPointerDeclarator() {
	    return this.getTypedRuleContext(NoPointerDeclaratorContext,0);
	};

	parametersAndQualifiers() {
	    return this.getTypedRuleContext(ParametersAndQualifiersContext,0);
	};

	LeftBracket() {
	    return this.getToken(CPP14Parser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CPP14Parser.RightBracket, 0);
	};

	constantExpr() {
	    return this.getTypedRuleContext(ConstantExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNoPointerDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNoPointerDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNoPointerDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParametersAndQualifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_parametersAndQualifiers;
    }

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	parameterDeclarationClause() {
	    return this.getTypedRuleContext(ParameterDeclarationClauseContext,0);
	};

	cvqualifierseq() {
	    return this.getTypedRuleContext(CvqualifierseqContext,0);
	};

	refqualifier() {
	    return this.getTypedRuleContext(RefqualifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterParametersAndQualifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitParametersAndQualifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitParametersAndQualifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrailingReturnTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_trailingReturnType;
    }

	Arrow() {
	    return this.getToken(CPP14Parser.Arrow, 0);
	};

	trailingTypeSpecifierSeq() {
	    return this.getTypedRuleContext(TrailingTypeSpecifierSeqContext,0);
	};

	abstractDeclarator() {
	    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTrailingReturnType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTrailingReturnType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTrailingReturnType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PointerOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_pointerOperator;
    }

	And() {
	    return this.getToken(CPP14Parser.And, 0);
	};

	AndAnd() {
	    return this.getToken(CPP14Parser.AndAnd, 0);
	};

	Star() {
	    return this.getToken(CPP14Parser.Star, 0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	cvqualifierseq() {
	    return this.getTypedRuleContext(CvqualifierseqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterPointerOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitPointerOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitPointerOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CvqualifierseqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_cvqualifierseq;
    }

	cvQualifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CvQualifierContext);
	    } else {
	        return this.getTypedRuleContext(CvQualifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterCvqualifierseq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitCvqualifierseq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitCvqualifierseq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CvQualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_cvQualifier;
    }

	Const() {
	    return this.getToken(CPP14Parser.Const, 0);
	};

	Volatile() {
	    return this.getToken(CPP14Parser.Volatile, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterCvQualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitCvQualifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitCvQualifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RefqualifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_refqualifier;
    }

	And() {
	    return this.getToken(CPP14Parser.And, 0);
	};

	AndAnd() {
	    return this.getToken(CPP14Parser.AndAnd, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterRefqualifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitRefqualifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitRefqualifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeclaratoridContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_declaratorid;
    }

	idExpr() {
	    return this.getTypedRuleContext(IdExprContext,0);
	};

	Ellipsis() {
	    return this.getToken(CPP14Parser.Ellipsis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterDeclaratorid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitDeclaratorid(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitDeclaratorid(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TheTypeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_theTypeId;
    }

	typeSpecifierSeq() {
	    return this.getTypedRuleContext(TypeSpecifierSeqContext,0);
	};

	abstractDeclarator() {
	    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTheTypeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTheTypeId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTheTypeId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AbstractDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_abstractDeclarator;
    }

	pointerAbstractDeclarator() {
	    return this.getTypedRuleContext(PointerAbstractDeclaratorContext,0);
	};

	parametersAndQualifiers() {
	    return this.getTypedRuleContext(ParametersAndQualifiersContext,0);
	};

	trailingReturnType() {
	    return this.getTypedRuleContext(TrailingReturnTypeContext,0);
	};

	noPointerAbstractDeclarator() {
	    return this.getTypedRuleContext(NoPointerAbstractDeclaratorContext,0);
	};

	abstractPackDeclarator() {
	    return this.getTypedRuleContext(AbstractPackDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAbstractDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAbstractDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAbstractDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PointerAbstractDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_pointerAbstractDeclarator;
    }

	noPointerAbstractDeclarator() {
	    return this.getTypedRuleContext(NoPointerAbstractDeclaratorContext,0);
	};

	pointerOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PointerOperatorContext);
	    } else {
	        return this.getTypedRuleContext(PointerOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterPointerAbstractDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitPointerAbstractDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitPointerAbstractDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoPointerAbstractDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_noPointerAbstractDeclarator;
    }

	parametersAndQualifiers() {
	    return this.getTypedRuleContext(ParametersAndQualifiersContext,0);
	};

	LeftBracket() {
	    return this.getToken(CPP14Parser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CPP14Parser.RightBracket, 0);
	};

	constantExpr() {
	    return this.getTypedRuleContext(ConstantExprContext,0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	pointerAbstractDeclarator() {
	    return this.getTypedRuleContext(PointerAbstractDeclaratorContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	noPointerAbstractDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NoPointerAbstractDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(NoPointerAbstractDeclaratorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNoPointerAbstractDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNoPointerAbstractDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNoPointerAbstractDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AbstractPackDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_abstractPackDeclarator;
    }

	noPointerAbstractPackDeclarator() {
	    return this.getTypedRuleContext(NoPointerAbstractPackDeclaratorContext,0);
	};

	pointerOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PointerOperatorContext);
	    } else {
	        return this.getTypedRuleContext(PointerOperatorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAbstractPackDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAbstractPackDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAbstractPackDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoPointerAbstractPackDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_noPointerAbstractPackDeclarator;
    }

	Ellipsis() {
	    return this.getToken(CPP14Parser.Ellipsis, 0);
	};

	noPointerAbstractPackDeclarator() {
	    return this.getTypedRuleContext(NoPointerAbstractPackDeclaratorContext,0);
	};

	parametersAndQualifiers() {
	    return this.getTypedRuleContext(ParametersAndQualifiersContext,0);
	};

	LeftBracket() {
	    return this.getToken(CPP14Parser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CPP14Parser.RightBracket, 0);
	};

	constantExpr() {
	    return this.getTypedRuleContext(ConstantExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterNoPointerAbstractPackDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitNoPointerAbstractPackDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitNoPointerAbstractPackDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterDeclarationClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_parameterDeclarationClause;
    }

	parameterDeclarationList() {
	    return this.getTypedRuleContext(ParameterDeclarationListContext,0);
	};

	Ellipsis() {
	    return this.getToken(CPP14Parser.Ellipsis, 0);
	};

	Comma() {
	    return this.getToken(CPP14Parser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterParameterDeclarationClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitParameterDeclarationClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitParameterDeclarationClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_parameterDeclarationList;
    }

	parameterDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ParameterDeclarationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterParameterDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitParameterDeclarationList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitParameterDeclarationList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_parameterDeclaration;
    }

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	initializerClause() {
	    return this.getTypedRuleContext(InitializerClauseContext,0);
	};

	abstractDeclarator() {
	    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterParameterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitParameterDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitParameterDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_functionDefinition;
    }

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterFunctionDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitFunctionDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitFunctionDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_functionBody;
    }

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	constructorInitializer() {
	    return this.getTypedRuleContext(ConstructorInitializerContext,0);
	};

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	Default() {
	    return this.getToken(CPP14Parser.Default, 0);
	};

	Delete() {
	    return this.getToken(CPP14Parser.Delete, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitFunctionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitFunctionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_initializer;
    }

	braceOrEqualInitializer() {
	    return this.getTypedRuleContext(BraceOrEqualInitializerContext,0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BraceOrEqualInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_braceOrEqualInitializer;
    }

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	initializerClause() {
	    return this.getTypedRuleContext(InitializerClauseContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterBraceOrEqualInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitBraceOrEqualInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitBraceOrEqualInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InitializerClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_initializerClause;
    }

	assignmentExpr() {
	    return this.getTypedRuleContext(AssignmentExprContext,0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterInitializerClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitInitializerClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitInitializerClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InitializerListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_initializerList;
    }

	initializerClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitializerClauseContext);
	    } else {
	        return this.getTypedRuleContext(InitializerClauseContext,i);
	    }
	};

	Ellipsis = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Ellipsis);
	    } else {
	        return this.getToken(CPP14Parser.Ellipsis, i);
	    }
	};


	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterInitializerList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitInitializerList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitInitializerList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BracedInitListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_bracedInitList;
    }

	LeftBrace() {
	    return this.getToken(CPP14Parser.LeftBrace, 0);
	};

	RightBrace() {
	    return this.getToken(CPP14Parser.RightBrace, 0);
	};

	initializerList() {
	    return this.getTypedRuleContext(InitializerListContext,0);
	};

	Comma() {
	    return this.getToken(CPP14Parser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterBracedInitList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitBracedInitList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitBracedInitList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_className;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterClassName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitClassName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitClassName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_classSpecifier;
    }

	classHead() {
	    return this.getTypedRuleContext(ClassHeadContext,0);
	};

	LeftBrace() {
	    return this.getToken(CPP14Parser.LeftBrace, 0);
	};

	RightBrace() {
	    return this.getToken(CPP14Parser.RightBrace, 0);
	};

	memberSpecification() {
	    return this.getTypedRuleContext(MemberSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterClassSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitClassSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitClassSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassHeadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_classHead;
    }

	classKey() {
	    return this.getTypedRuleContext(ClassKeyContext,0);
	};

	classHeadName() {
	    return this.getTypedRuleContext(ClassHeadNameContext,0);
	};

	classVirtSpecifier() {
	    return this.getTypedRuleContext(ClassVirtSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterClassHead(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitClassHead(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitClassHead(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassHeadNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_classHeadName;
    }

	className() {
	    return this.getTypedRuleContext(ClassNameContext,0);
	};

	nestedNameSpecifier() {
	    return this.getTypedRuleContext(NestedNameSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterClassHeadName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitClassHeadName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitClassHeadName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassVirtSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_classVirtSpecifier;
    }

	Final() {
	    return this.getToken(CPP14Parser.Final, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterClassVirtSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitClassVirtSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitClassVirtSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_classKey;
    }

	Class() {
	    return this.getToken(CPP14Parser.Class, 0);
	};

	Struct() {
	    return this.getToken(CPP14Parser.Struct, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterClassKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitClassKey(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitClassKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MemberSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_memberSpecification;
    }

	memberdeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MemberdeclarationContext);
	    } else {
	        return this.getTypedRuleContext(MemberdeclarationContext,i);
	    }
	};

	accessSpecifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AccessSpecifierContext);
	    } else {
	        return this.getTypedRuleContext(AccessSpecifierContext,i);
	    }
	};

	Colon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Colon);
	    } else {
	        return this.getToken(CPP14Parser.Colon, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterMemberSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitMemberSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitMemberSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MemberdeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_memberdeclaration;
    }

	Semi() {
	    return this.getToken(CPP14Parser.Semi, 0);
	};

	declSpecifierSeq() {
	    return this.getTypedRuleContext(DeclSpecifierSeqContext,0);
	};

	memberDeclaratorList() {
	    return this.getTypedRuleContext(MemberDeclaratorListContext,0);
	};

	functionDefinition() {
	    return this.getTypedRuleContext(FunctionDefinitionContext,0);
	};

	usingDeclaration() {
	    return this.getTypedRuleContext(UsingDeclarationContext,0);
	};

	emptyDeclaration_() {
	    return this.getTypedRuleContext(EmptyDeclaration_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterMemberdeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitMemberdeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitMemberdeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MemberDeclaratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_memberDeclaratorList;
    }

	memberDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MemberDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(MemberDeclaratorContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterMemberDeclaratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitMemberDeclaratorList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitMemberDeclaratorList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MemberDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_memberDeclarator;
    }

	declarator() {
	    return this.getTypedRuleContext(DeclaratorContext,0);
	};

	braceOrEqualInitializer() {
	    return this.getTypedRuleContext(BraceOrEqualInitializerContext,0);
	};

	pureSpecifier() {
	    return this.getTypedRuleContext(PureSpecifierContext,0);
	};

	Colon() {
	    return this.getToken(CPP14Parser.Colon, 0);
	};

	constantExpr() {
	    return this.getTypedRuleContext(ConstantExprContext,0);
	};

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterMemberDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitMemberDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitMemberDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PureSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_pureSpecifier;
    }

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	IntLiteral() {
	    return this.getToken(CPP14Parser.IntLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterPureSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitPureSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitPureSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AccessSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_accessSpecifier;
    }

	Private() {
	    return this.getToken(CPP14Parser.Private, 0);
	};

	Protected() {
	    return this.getToken(CPP14Parser.Protected, 0);
	};

	Public() {
	    return this.getToken(CPP14Parser.Public, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterAccessSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitAccessSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitAccessSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstructorInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_constructorInitializer;
    }

	Colon() {
	    return this.getToken(CPP14Parser.Colon, 0);
	};

	memInitializerList() {
	    return this.getTypedRuleContext(MemInitializerListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterConstructorInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitConstructorInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitConstructorInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MemInitializerListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_memInitializerList;
    }

	memInitializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MemInitializerContext);
	    } else {
	        return this.getTypedRuleContext(MemInitializerContext,i);
	    }
	};

	Ellipsis = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Ellipsis);
	    } else {
	        return this.getToken(CPP14Parser.Ellipsis, i);
	    }
	};


	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Comma);
	    } else {
	        return this.getToken(CPP14Parser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterMemInitializerList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitMemInitializerList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitMemInitializerList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MemInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_memInitializer;
    }

	meminitializerid() {
	    return this.getTypedRuleContext(MeminitializeridContext,0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	bracedInitList() {
	    return this.getTypedRuleContext(BracedInitListContext,0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterMemInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitMemInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitMemInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MeminitializeridContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_meminitializerid;
    }

	Identifier() {
	    return this.getToken(CPP14Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterMeminitializerid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitMeminitializerid(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitMeminitializerid(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TheOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_theOperator;
    }

	New() {
	    return this.getToken(CPP14Parser.New, 0);
	};

	LeftBracket() {
	    return this.getToken(CPP14Parser.LeftBracket, 0);
	};

	RightBracket() {
	    return this.getToken(CPP14Parser.RightBracket, 0);
	};

	Delete() {
	    return this.getToken(CPP14Parser.Delete, 0);
	};

	Plus() {
	    return this.getToken(CPP14Parser.Plus, 0);
	};

	Minus() {
	    return this.getToken(CPP14Parser.Minus, 0);
	};

	Star() {
	    return this.getToken(CPP14Parser.Star, 0);
	};

	Div() {
	    return this.getToken(CPP14Parser.Div, 0);
	};

	Mod() {
	    return this.getToken(CPP14Parser.Mod, 0);
	};

	Caret() {
	    return this.getToken(CPP14Parser.Caret, 0);
	};

	And() {
	    return this.getToken(CPP14Parser.And, 0);
	};

	Or() {
	    return this.getToken(CPP14Parser.Or, 0);
	};

	Tilde() {
	    return this.getToken(CPP14Parser.Tilde, 0);
	};

	Not() {
	    return this.getToken(CPP14Parser.Not, 0);
	};

	Assign() {
	    return this.getToken(CPP14Parser.Assign, 0);
	};

	Greater = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Greater);
	    } else {
	        return this.getToken(CPP14Parser.Greater, i);
	    }
	};


	Less = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(CPP14Parser.Less);
	    } else {
	        return this.getToken(CPP14Parser.Less, i);
	    }
	};


	GreaterEqual() {
	    return this.getToken(CPP14Parser.GreaterEqual, 0);
	};

	PlusAssign() {
	    return this.getToken(CPP14Parser.PlusAssign, 0);
	};

	MinusAssign() {
	    return this.getToken(CPP14Parser.MinusAssign, 0);
	};

	StarAssign() {
	    return this.getToken(CPP14Parser.StarAssign, 0);
	};

	ModAssign() {
	    return this.getToken(CPP14Parser.ModAssign, 0);
	};

	XorAssign() {
	    return this.getToken(CPP14Parser.XorAssign, 0);
	};

	AndAssign() {
	    return this.getToken(CPP14Parser.AndAssign, 0);
	};

	OrAssign() {
	    return this.getToken(CPP14Parser.OrAssign, 0);
	};

	RightShiftAssign() {
	    return this.getToken(CPP14Parser.RightShiftAssign, 0);
	};

	LeftShiftAssign() {
	    return this.getToken(CPP14Parser.LeftShiftAssign, 0);
	};

	Equal() {
	    return this.getToken(CPP14Parser.Equal, 0);
	};

	NotEqual() {
	    return this.getToken(CPP14Parser.NotEqual, 0);
	};

	LessEqual() {
	    return this.getToken(CPP14Parser.LessEqual, 0);
	};

	AndAnd() {
	    return this.getToken(CPP14Parser.AndAnd, 0);
	};

	OrOr() {
	    return this.getToken(CPP14Parser.OrOr, 0);
	};

	PlusPlus() {
	    return this.getToken(CPP14Parser.PlusPlus, 0);
	};

	MinusMinus() {
	    return this.getToken(CPP14Parser.MinusMinus, 0);
	};

	Comma() {
	    return this.getToken(CPP14Parser.Comma, 0);
	};

	ArrowStar() {
	    return this.getToken(CPP14Parser.ArrowStar, 0);
	};

	Arrow() {
	    return this.getToken(CPP14Parser.Arrow, 0);
	};

	LeftParen() {
	    return this.getToken(CPP14Parser.LeftParen, 0);
	};

	RightParen() {
	    return this.getToken(CPP14Parser.RightParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterTheOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitTheOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitTheOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = CPP14Parser.RULE_literal;
    }

	IntLiteral() {
	    return this.getToken(CPP14Parser.IntLiteral, 0);
	};

	CharLiteral() {
	    return this.getToken(CPP14Parser.CharLiteral, 0);
	};

	FloatLiteral() {
	    return this.getToken(CPP14Parser.FloatLiteral, 0);
	};

	StringLiteral() {
	    return this.getToken(CPP14Parser.StringLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(CPP14Parser.BooleanLiteral, 0);
	};

	PointerLiteral() {
	    return this.getToken(CPP14Parser.PointerLiteral, 0);
	};

	UserDefinedLiteral() {
	    return this.getToken(CPP14Parser.UserDefinedLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof CPP14ParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof CPP14ParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




CPP14Parser.TranslationUnitContext = TranslationUnitContext; 
CPP14Parser.PrimaryExprContext = PrimaryExprContext; 
CPP14Parser.IdExprContext = IdExprContext; 
CPP14Parser.UnqualifiedIdContext = UnqualifiedIdContext; 
CPP14Parser.QualifiedIdContext = QualifiedIdContext; 
CPP14Parser.NestedNameSpecifierContext = NestedNameSpecifierContext; 
CPP14Parser.LambdaExprContext = LambdaExprContext; 
CPP14Parser.LambdaIntroducerContext = LambdaIntroducerContext; 
CPP14Parser.LambdaCaptureContext = LambdaCaptureContext; 
CPP14Parser.CaptureDefaultContext = CaptureDefaultContext; 
CPP14Parser.CaptureListContext = CaptureListContext; 
CPP14Parser.CaptureContext = CaptureContext; 
CPP14Parser.SimpleCaptureContext = SimpleCaptureContext; 
CPP14Parser.InitcaptureContext = InitcaptureContext; 
CPP14Parser.LambdaDeclaratorContext = LambdaDeclaratorContext; 
CPP14Parser.PostfixExprContext = PostfixExprContext; 
CPP14Parser.TypeIdOfTheTypeIdContext = TypeIdOfTheTypeIdContext; 
CPP14Parser.ExprListContext = ExprListContext; 
CPP14Parser.PseudoDestructorNameContext = PseudoDestructorNameContext; 
CPP14Parser.UnaryExprContext = UnaryExprContext; 
CPP14Parser.UnaryOperatorContext = UnaryOperatorContext; 
CPP14Parser.NewExpr_Context = NewExpr_Context; 
CPP14Parser.NewPlacementContext = NewPlacementContext; 
CPP14Parser.NewTypeIdContext = NewTypeIdContext; 
CPP14Parser.NewDeclarator_Context = NewDeclarator_Context; 
CPP14Parser.NoPointerNewDeclaratorContext = NoPointerNewDeclaratorContext; 
CPP14Parser.NewInitializer_Context = NewInitializer_Context; 
CPP14Parser.DeleteExprContext = DeleteExprContext; 
CPP14Parser.CastExprContext = CastExprContext; 
CPP14Parser.PointerMemberExprContext = PointerMemberExprContext; 
CPP14Parser.MultiplicativeExprContext = MultiplicativeExprContext; 
CPP14Parser.AdditiveExprContext = AdditiveExprContext; 
CPP14Parser.ShiftExprContext = ShiftExprContext; 
CPP14Parser.ShiftOperatorContext = ShiftOperatorContext; 
CPP14Parser.RelationalExprContext = RelationalExprContext; 
CPP14Parser.EqualityExprContext = EqualityExprContext; 
CPP14Parser.AndExprContext = AndExprContext; 
CPP14Parser.ExclusiveOrExprContext = ExclusiveOrExprContext; 
CPP14Parser.InclusiveOrExprContext = InclusiveOrExprContext; 
CPP14Parser.LogicalAndExprContext = LogicalAndExprContext; 
CPP14Parser.LogicalOrExprContext = LogicalOrExprContext; 
CPP14Parser.ConditionalExprContext = ConditionalExprContext; 
CPP14Parser.AssignmentExprContext = AssignmentExprContext; 
CPP14Parser.AssignmentOperatorContext = AssignmentOperatorContext; 
CPP14Parser.ExprContext = ExprContext; 
CPP14Parser.ConstantExprContext = ConstantExprContext; 
CPP14Parser.StatementContext = StatementContext; 
CPP14Parser.LabeledStatementContext = LabeledStatementContext; 
CPP14Parser.ExprStatementContext = ExprStatementContext; 
CPP14Parser.CompoundStatementContext = CompoundStatementContext; 
CPP14Parser.StatementSeqContext = StatementSeqContext; 
CPP14Parser.SelectionStatementContext = SelectionStatementContext; 
CPP14Parser.ConditionContext = ConditionContext; 
CPP14Parser.IterationStatementContext = IterationStatementContext; 
CPP14Parser.ForInitStatementContext = ForInitStatementContext; 
CPP14Parser.ForRangeDeclarationContext = ForRangeDeclarationContext; 
CPP14Parser.ForRangeInitializerContext = ForRangeInitializerContext; 
CPP14Parser.JumpStatementContext = JumpStatementContext; 
CPP14Parser.DeclarationStatementContext = DeclarationStatementContext; 
CPP14Parser.DeclarationseqContext = DeclarationseqContext; 
CPP14Parser.DeclarationContext = DeclarationContext; 
CPP14Parser.BlockDeclarationContext = BlockDeclarationContext; 
CPP14Parser.SimpleDeclarationContext = SimpleDeclarationContext; 
CPP14Parser.EmptyDeclaration_Context = EmptyDeclaration_Context; 
CPP14Parser.DeclSpecifierContext = DeclSpecifierContext; 
CPP14Parser.DeclSpecifierSeqContext = DeclSpecifierSeqContext; 
CPP14Parser.FunctionSpecifierContext = FunctionSpecifierContext; 
CPP14Parser.TypedefNameContext = TypedefNameContext; 
CPP14Parser.TypeSpecifierContext = TypeSpecifierContext; 
CPP14Parser.TrailingTypeSpecifierContext = TrailingTypeSpecifierContext; 
CPP14Parser.TypeSpecifierSeqContext = TypeSpecifierSeqContext; 
CPP14Parser.TrailingTypeSpecifierSeqContext = TrailingTypeSpecifierSeqContext; 
CPP14Parser.SimpleTypeLengthModifierContext = SimpleTypeLengthModifierContext; 
CPP14Parser.SimpleTypeSignednessModifierContext = SimpleTypeSignednessModifierContext; 
CPP14Parser.SimpleTypeSpecifierContext = SimpleTypeSpecifierContext; 
CPP14Parser.TheTypeNameContext = TheTypeNameContext; 
CPP14Parser.NamespaceNameContext = NamespaceNameContext; 
CPP14Parser.OriginalNamespaceNameContext = OriginalNamespaceNameContext; 
CPP14Parser.NamespaceDefinitionContext = NamespaceDefinitionContext; 
CPP14Parser.UsingDeclarationContext = UsingDeclarationContext; 
CPP14Parser.UsingDirectiveContext = UsingDirectiveContext; 
CPP14Parser.InitDeclaratorListContext = InitDeclaratorListContext; 
CPP14Parser.InitDeclaratorContext = InitDeclaratorContext; 
CPP14Parser.DeclaratorContext = DeclaratorContext; 
CPP14Parser.PointerDeclaratorContext = PointerDeclaratorContext; 
CPP14Parser.NoPointerDeclaratorContext = NoPointerDeclaratorContext; 
CPP14Parser.ParametersAndQualifiersContext = ParametersAndQualifiersContext; 
CPP14Parser.TrailingReturnTypeContext = TrailingReturnTypeContext; 
CPP14Parser.PointerOperatorContext = PointerOperatorContext; 
CPP14Parser.CvqualifierseqContext = CvqualifierseqContext; 
CPP14Parser.CvQualifierContext = CvQualifierContext; 
CPP14Parser.RefqualifierContext = RefqualifierContext; 
CPP14Parser.DeclaratoridContext = DeclaratoridContext; 
CPP14Parser.TheTypeIdContext = TheTypeIdContext; 
CPP14Parser.AbstractDeclaratorContext = AbstractDeclaratorContext; 
CPP14Parser.PointerAbstractDeclaratorContext = PointerAbstractDeclaratorContext; 
CPP14Parser.NoPointerAbstractDeclaratorContext = NoPointerAbstractDeclaratorContext; 
CPP14Parser.AbstractPackDeclaratorContext = AbstractPackDeclaratorContext; 
CPP14Parser.NoPointerAbstractPackDeclaratorContext = NoPointerAbstractPackDeclaratorContext; 
CPP14Parser.ParameterDeclarationClauseContext = ParameterDeclarationClauseContext; 
CPP14Parser.ParameterDeclarationListContext = ParameterDeclarationListContext; 
CPP14Parser.ParameterDeclarationContext = ParameterDeclarationContext; 
CPP14Parser.FunctionDefinitionContext = FunctionDefinitionContext; 
CPP14Parser.FunctionBodyContext = FunctionBodyContext; 
CPP14Parser.InitializerContext = InitializerContext; 
CPP14Parser.BraceOrEqualInitializerContext = BraceOrEqualInitializerContext; 
CPP14Parser.InitializerClauseContext = InitializerClauseContext; 
CPP14Parser.InitializerListContext = InitializerListContext; 
CPP14Parser.BracedInitListContext = BracedInitListContext; 
CPP14Parser.ClassNameContext = ClassNameContext; 
CPP14Parser.ClassSpecifierContext = ClassSpecifierContext; 
CPP14Parser.ClassHeadContext = ClassHeadContext; 
CPP14Parser.ClassHeadNameContext = ClassHeadNameContext; 
CPP14Parser.ClassVirtSpecifierContext = ClassVirtSpecifierContext; 
CPP14Parser.ClassKeyContext = ClassKeyContext; 
CPP14Parser.MemberSpecificationContext = MemberSpecificationContext; 
CPP14Parser.MemberdeclarationContext = MemberdeclarationContext; 
CPP14Parser.MemberDeclaratorListContext = MemberDeclaratorListContext; 
CPP14Parser.MemberDeclaratorContext = MemberDeclaratorContext; 
CPP14Parser.PureSpecifierContext = PureSpecifierContext; 
CPP14Parser.AccessSpecifierContext = AccessSpecifierContext; 
CPP14Parser.ConstructorInitializerContext = ConstructorInitializerContext; 
CPP14Parser.MemInitializerListContext = MemInitializerListContext; 
CPP14Parser.MemInitializerContext = MemInitializerContext; 
CPP14Parser.MeminitializeridContext = MeminitializeridContext; 
CPP14Parser.TheOperatorContext = TheOperatorContext; 
CPP14Parser.LiteralContext = LiteralContext; 
