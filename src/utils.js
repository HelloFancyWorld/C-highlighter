export default function getTokenType(token_type) {
  if (
    ["LineComment", "BlockComment", "Newline", "Whitespace"].includes(
      token_type
    )
  )
    return "comment";
  else if (
    [
      "Alignas",
      "Alignof",
      "Asm",
      "Auto",
      "Bool",
      "Break",
      "Case",
      "Catch",
      "Char",
      "Char16",
      "Char32",
      "Class",
      "Const",
      "Constexpr",
      "Const_cast",
      "Continue",
      "Decltype",
      "Default",
      "Delete",
      "Do",
      "Double",
      "Dynamic_cast",
      "Else",
      "Enum",
      "Explicit",
      "Export",
      "Extern",
      "False_",
      "Final",
      "Float",
      "For",
      "Friend",
      "Goto",
      "If",
      "Inline",
      "Int",
      "Long",
      "Mutable",
      "Namespace",
      "New",
      "Noexcept",
      "Nullptr",
      "Operator",
      "Override",
      "Private",
      "Protected",
      "Public",
      "Register",
      "Reinterpret_cast",
      "Return",
      "Short",
      "Signed",
      "Sizeof",
      "Static",
      "Static_assert",
      "Static_cast",
      "Struct",
      "Switch",
      "Template",
      "This",
      "Thread_local",
      "Throw",
      "True_",
      "Try",
      "Typedef",
      "Typeid_",
      "Typename_",
      "Union",
      "Unsigned",
      "Using",
      "Virtual",
      "Void",
      "Volatile",
      "Wchar",
      "While",
    ].includes(token_type)
  )
    return "keyword";
  else if (
    [
      "CharacterLiteral",
      "StringLiteral",
      "BooleanLiteral",
      "PointerLiteral",
    ].includes(token_type)
  )
    return "string";
  else if (["IntegerLiteral", "FloatingLiteral"].includes(token_type))
    return "number";
  else if (
    [
      "LeftParen",
      "RightParen",
      "LeftBracket",
      "RightBracket",
      "LeftBrace",
      "RightBrace",
      "Plus",
      "Minus",
      "Star",
      "Div",
      "Mod",
      "Caret",
      "And",
      "Or",
      "Tilde",
      "Not",
      "Assign",
      "Less",
      "Greater",
      "PlusAssign",
      "MinusAssign",
      "StarAssign",
      "DivAssign",
      "ModAssign",
      "XorAssign",
      "AndAssign",
      "OrAssign",
      "LeftShiftAssign",
      "RightShiftAssign",
      "Equal",
      "NotEqual",
      "LessEqual",
      "GreaterEqual",
      "AndAnd",
      "OrOr",
      "PlusPlus",
      "MinusMinus",
      "Comma",
      "ArrowStar",
      "Arrow",
      "Question",
      "Colon",
      "Doublecolon",
      "Semi",
      "Dot",
      "DotStar",
      "Ellipsis",
    ].includes(token_type)
  )
    return "enum";
  else if (["Identifier"].includes(token_type)) return "variable";
  else if (["Directive", "MultiLineMacro"].includes(token_type)) return "Lib";
  else return "other";
}
